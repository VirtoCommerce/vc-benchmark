<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.3.14. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Server Name" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="serverName" elementType="Argument">
            <stringProp name="Argument.name">serverName</stringProp>
            <stringProp name="Argument.value">loadtest-storefront.dev.govirto.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">URL of the server under test</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Server Name or IP</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Load config (set)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="totalThreads" elementType="Argument">
            <stringProp name="Argument.name">totalThreads</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Total number of threads (users) </stringProp>
          </elementProp>
          <elementProp name="rampUp" elementType="Argument">
            <stringProp name="Argument.name">rampUp</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Ramp-up period (seconds)</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">180</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Duration (seconds) </stringProp>
          </elementProp>
          <elementProp name="Group1.loadPerc" elementType="Argument">
            <stringProp name="Argument.name">Group1.loadPerc</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">% of total load</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Group2.loadPerc" elementType="Argument">
            <stringProp name="Argument.name">Group2.loadPerc</stringProp>
            <stringProp name="Argument.value">25</stringProp>
            <stringProp name="Argument.desc">% of total load</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Group3.loadPerc" elementType="Argument">
            <stringProp name="Argument.name">Group3.loadPerc</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.desc">% of total load</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Group4.loadPerc" elementType="Argument">
            <stringProp name="Argument.name">Group4.loadPerc</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.desc">% of total load</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Load config (calc)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Group1.threads" elementType="Argument">
            <stringProp name="Argument.name">Group1.threads</stringProp>
            <stringProp name="Argument.value">${__javaScript(Math.floor(parseInt(vars.get(&quot;totalThreads&quot;))/100*parseInt(vars.get(&quot;Group1.loadPerc&quot;))))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Group2.threads" elementType="Argument">
            <stringProp name="Argument.name">Group2.threads</stringProp>
            <stringProp name="Argument.value">${__javaScript(Math.floor(parseInt(vars.get(&quot;totalThreads&quot;))/100*parseInt(vars.get(&quot;Group2.loadPerc&quot;))))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Group3.threads" elementType="Argument">
            <stringProp name="Argument.name">Group3.threads</stringProp>
            <stringProp name="Argument.value">${__javaScript(Math.floor(parseInt(vars.get(&quot;totalThreads&quot;))/100*parseInt(vars.get(&quot;Group3.loadPerc&quot;))))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Group4.threads" elementType="Argument">
            <stringProp name="Argument.name">Group4.threads</stringProp>
            <stringProp name="Argument.value">${__javaScript(Math.floor(parseInt(vars.get(&quot;totalThreads&quot;))/100*parseInt(vars.get(&quot;Group4.loadPerc&quot;))))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Delay config" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="DelayTimer.min" elementType="Argument">
            <stringProp name="Argument.name">DelayTimer.min</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Lower value of the user decision delay timer</stringProp>
          </elementProp>
          <elementProp name="DelayTimer.max" elementType="Argument">
            <stringProp name="Argument.name">DelayTimer.max</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Upper value of the user decision delay timer</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Search config" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SearchRequests.min" elementType="Argument">
            <stringProp name="Argument.name">SearchRequests.min</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Lower value of the number of search queries</stringProp>
          </elementProp>
          <elementProp name="SearchRequests.max" elementType="Argument">
            <stringProp name="Argument.name">SearchRequests.max</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Upper value of the number of search queries</stringProp>
          </elementProp>
          <elementProp name="Keyword.maxCount" elementType="Argument">
            <stringProp name="Argument.name">Keyword.maxCount</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Number of keywords</stringProp>
          </elementProp>
          <elementProp name="keyword_1" elementType="Argument">
            <stringProp name="Argument.name">keyword_1</stringProp>
            <stringProp name="Argument.value">printer</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyword_2" elementType="Argument">
            <stringProp name="Argument.name">keyword_2</stringProp>
            <stringProp name="Argument.value">bolt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyword_3" elementType="Argument">
            <stringProp name="Argument.name">keyword_3</stringProp>
            <stringProp name="Argument.value">black</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyword_4" elementType="Argument">
            <stringProp name="Argument.name">keyword_4</stringProp>
            <stringProp name="Argument.value">white</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyword_5" elementType="Argument">
            <stringProp name="Argument.name">keyword_5</stringProp>
            <stringProp name="Argument.value">laser</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Сredentials" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">jmetertest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Password1!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Сredencials from CSV file" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">C:/Users/danil.bayushev/Desktop/_Virto/Load/LoadTests/accounts25.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">username,password</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
        <stringProp name="HTTPSampler.port">443</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Referer</stringProp>
            <stringProp name="Header.value">${serverName}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Origin</stringProp>
            <stringProp name="Header.value">${serverName}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Group1 (Register New User)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${Group1.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUp}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Initializing" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Сontext" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storefrontapi/theme/context</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.StoreId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.StoreId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.storeId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.StoreName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.StoreName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.storeName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CultureName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CultureName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultCurrency.cultureName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CurrencyCode" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CurrencyCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultCurrency.code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CatalogId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CatalogId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.catalogId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.UserId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.UserId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.userId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMe" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMe&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query GetMe($after: String, $first: Int, $sort: String) {\n  me {\n    id\n    memberId\n    userName\n    email\n    emailConfirmed\n    photoUrl\n    phoneNumber\n    permissions\n    contact {\n      firstName\n      lastName\n      fullName\n      organizations(after: $after, first: $first, sort: $sort) {\n        items {\n          id\n          name\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMe</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMe($after: String, $first: Int, $sort: String) {
  me {
    id
    memberId
    userName
    email
    emailConfirmed
    photoUrl
    phoneNumber
    permissions
    contact {
      firstName
      lastName
      fullName
      organizations(after: $after, first: $first, sort: $sort) {
        items {
          id
          name
        }
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMenus" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMenus&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;},&quot;query&quot;:&quot;query GetMenus($storeId: String!, $cultureName: String, $keyword: String) {\n  menus(storeId: $storeId, cultureName: $cultureName, keyword: $keyword) {\n    name\n    items {\n      title\n      url\n      priority\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMenus</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMenus($storeId: String!, $cultureName: String, $keyword: String) {
  menus(storeId: $storeId, cultureName: $cultureName, keyword: $keyword) {
    name
    items {
      title
      url
      priority
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMyCart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;userId&quot;:&quot;${Init.UserId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line${totalThreads}\n  line${SearchRequests.min}\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    id\n    brandName\n    slug\n    masterVariation {\n      id\n      slug\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line${totalThreads}
  line${SearchRequests.min}
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    id
    brandName
    slug
    masterVariation {
      id
      slug
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,
	&quot;userId&quot;:&quot;${Init.UserId}&quot;,
	&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,
	&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Generate User Data" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="910795896">NewUser.FirstName</stringProp>
            <stringProp name="-1434504316">NewUser.LastName</stringProp>
            <stringProp name="1355947773">NewUser.FullName</stringProp>
            <stringProp name="2135760185">NewUser.Email</stringProp>
            <stringProp name="-240617959">NewUser.Username</stringProp>
            <stringProp name="1242081246">NewUser.Password</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="113267198">
              <stringProp name="-2072622721">Jmeter</stringProp>
              <stringProp name="1251763337">${__RandomString(10,abcdefghigklmnopqrstuvwxyz1234567890)}</stringProp>
              <stringProp name="1839222654">${NewUser.FirstName} ${NewUser.LastName}</stringProp>
              <stringProp name="808227210">${NewUser.FirstName}${NewUser.LastName}@yopmail.com</stringProp>
              <stringProp name="1091636198">${NewUser.FirstName}${NewUser.LastName}</stringProp>
              <stringProp name="-1009294837">Password1!</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="checkEmailUniqueness" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;checkEmailUniqueness&quot;,&quot;variables&quot;:{&quot;email&quot;:&quot;${NewUser.Email}&quot;},&quot;query&quot;:&quot;query checkEmailUniqueness($email: String!) {\n  checkEmailUniqueness(email: $email)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">checkEmailUniqueness</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query checkEmailUniqueness($email: String!) {
  checkEmailUniqueness(email: $email)
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{&quot;email&quot;:&quot;${NewUser.Email}&quot;}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${serverName}/sign-up</stringProp>
              </elementProp>
              <elementProp name="apollographql-client-name" elementType="Header">
                <stringProp name="Header.name">apollographql-client-name</stringProp>
                <stringProp name="Header.value">x-api-graphql-client</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://${serverName}</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="DelayTimer" enabled="true">
            <stringProp name="ConstantTimer.delay">${DelayTimer.min}</stringProp>
            <stringProp name="RandomTimer.range">${DelayTimer.max}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="checkEmailUniqueness" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">checkEmailUniqueness</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.checkEmailUniqueness</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="checkUsernameUniqueness" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;checkUsernameUniqueness&quot;,&quot;variables&quot;:{&quot;username&quot;:&quot;${NewUser.Username}&quot;},&quot;query&quot;:&quot;query checkUsernameUniqueness($username: String!) {\n  checkUsernameUniqueness(username: $username)\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">checkUsernameUniqueness</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query checkUsernameUniqueness($username: String!) {
  checkUsernameUniqueness(username: $username)
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{&quot;username&quot;:&quot;${NewUser.Username}&quot;}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${serverName}/sign-up</stringProp>
              </elementProp>
              <elementProp name="apollographql-client-name" elementType="Header">
                <stringProp name="Header.name">apollographql-client-name</stringProp>
                <stringProp name="Header.value">x-api-graphql-client</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://${serverName}</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="DelayTimer" enabled="true">
            <stringProp name="ConstantTimer.delay">${DelayTimer.min}</stringProp>
            <stringProp name="RandomTimer.range">${DelayTimer.max}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="checkUsernameUniqueness" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">checkUsernameUniqueness</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.checkUsernameUniqueness</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Uniqueness (Username &amp; email)" enabled="true">
          <stringProp name="IfController.condition">${__groovy((${checkUsernameUniqueness} == true) &amp;&amp; (${checkUsernameUniqueness} == true))}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="createContact" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createContact&quot;,&quot;variables&quot;:{&quot;command&quot;:{&quot;firstName&quot;:&quot;${NewUser.FirstName}&quot;,&quot;lastName&quot;:&quot;${NewUser.LastName}&quot;,&quot;name&quot;:&quot;${NewUser.FullName}&quot;,&quot;emails&quot;:[&quot;${NewUser.Email}&quot;]}},&quot;query&quot;:&quot;mutation createContact($command: InputCreateContactType!) {\n  createContact(command: $command) {\n    id\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">createContact</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation createContact($command: InputCreateContactType!) {
  createContact(command: $command) {
    id
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;command&quot;:{&quot;firstName&quot;:&quot;${NewUser.FirstName}&quot;,&quot;lastName&quot;:&quot;${NewUser.LastName}&quot;,&quot;name&quot;:&quot;${NewUser.FullName}&quot;,&quot;emails&quot;:[&quot;${NewUser.Email}&quot;]}}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="DelayTimer" enabled="true">
              <stringProp name="ConstantTimer.delay">${DelayTimer.min}</stringProp>
              <stringProp name="RandomTimer.range">${DelayTimer.max}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="NewUser.ContactId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">NewUser.ContactId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.createContact.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="createUser" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createUser&quot;,&quot;variables&quot;:{&quot;command&quot;:{&quot;applicationUser&quot;:{&quot;userName&quot;:&quot;${NewUser.Username}&quot;,&quot;password&quot;:&quot;${NewUser.Password}&quot;,&quot;email&quot;:&quot;${NewUser.Email}&quot;,&quot;memberId&quot;:&quot;${NewUser.ContactId}&quot;,&quot;userType&quot;:&quot;Customer&quot;,&quot;storeId&quot;:&quot;${storeId}&quot;}}},&quot;query&quot;:&quot;mutation createUser($command: InputCreateUserType!) {\n  createUser(command: $command) {\n    succeeded\n    errors {\n      code\n      description\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">createUser</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation createUser($command: InputCreateUserType!) {
  createUser(command: $command) {
    succeeded
    errors {
      code
      description
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;command&quot;:{&quot;applicationUser&quot;:{&quot;userName&quot;:&quot;${NewUser.Username}&quot;,&quot;password&quot;:&quot;${NewUser.Password}&quot;,&quot;email&quot;:&quot;${NewUser.Email}&quot;,&quot;memberId&quot;:&quot;${NewUser.ContactId}&quot;,&quot;userType&quot;:&quot;Customer&quot;,&quot;storeId&quot;:&quot;${storeId}&quot;}}}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Group2 (Search Products)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${Group2.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUp}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Initializing" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Сontext" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storefrontapi/theme/context</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.StoreId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.StoreId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.storeId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.StoreName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.StoreName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.storeName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CultureName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CultureName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultCurrency.cultureName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CurrencyCode" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CurrencyCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultCurrency.code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CatalogId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CatalogId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.catalogId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.UserId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.UserId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.userId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMe" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMe&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query GetMe($after: String, $first: Int, $sort: String) {\n  me {\n    id\n    memberId\n    userName\n    email\n    emailConfirmed\n    photoUrl\n    phoneNumber\n    permissions\n    contact {\n      firstName\n      lastName\n      fullName\n      organizations(after: $after, first: $first, sort: $sort) {\n        items {\n          id\n          name\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMe</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMe($after: String, $first: Int, $sort: String) {
  me {
    id
    memberId
    userName
    email
    emailConfirmed
    photoUrl
    phoneNumber
    permissions
    contact {
      firstName
      lastName
      fullName
      organizations(after: $after, first: $first, sort: $sort) {
        items {
          id
          name
        }
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMenus" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMenus&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;},&quot;query&quot;:&quot;query GetMenus($storeId: String!, $cultureName: String, $keyword: String) {\n  menus(storeId: $storeId, cultureName: $cultureName, keyword: $keyword) {\n    name\n    items {\n      title\n      url\n      priority\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMenus</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMenus($storeId: String!, $cultureName: String, $keyword: String) {
  menus(storeId: $storeId, cultureName: $cultureName, keyword: $keyword) {
    name
    items {
      title
      url
      priority
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMyCart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;userId&quot;:&quot;${Init.UserId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line${totalThreads}\n  line${SearchRequests.min}\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    id\n    brandName\n    slug\n    masterVariation {\n      id\n      slug\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line${totalThreads}
  line${SearchRequests.min}
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    id
    brandName
    slug
    masterVariation {
      id
      slug
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,
	&quot;userId&quot;:&quot;${Init.UserId}&quot;,
	&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,
	&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${__Random(${SearchRequests.min}, ${SearchRequests.max})}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="keyword choice" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">var key = vars.get(&quot;keyword_&quot; + ${__Random(1,${Keyword.maxCount})});
vars.put(&quot;keyword&quot;, key);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetSearchResults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetSearchResults&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;userId&quot;:&quot;${Init.UserId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;,&quot;query&quot;:&quot;${keyword}&quot;,&quot;filter&quot;:&quot;category.subtree:${Init.CatalogId}&quot;,&quot;productsFirst&quot;:9,&quot;productsAfter&quot;:&quot;0&quot;,&quot;categoriesFirst&quot;:20,&quot;categoriesAfter&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query GetSearchResults($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $query: String, $filter: String, $productsAfter: String, $productsFirst: Int, $productsSort: String, $productsFuzzy: Boolean, $productsFuzzyLevel: Int, $categoriesAfter: String, $categoriesFirst: Int, $categoriesSort: String, $categoriesFuzzy: Boolean, $categoriesFuzzyLevel: Int) {\n  products(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n    query: $query\n    filter: $filter\n    after: $productsAfter\n    first: $productsFirst\n    sort: $productsSort\n    fuzzy: $productsFuzzy\n    fuzzyLevel: $productsFuzzyLevel\n  ) {\n    totalCount\n    items {\n      id\n      name\n      code\n      slug\n      imgSrc\n      price {\n        actual {\n          amount\n          formattedAmount\n        }\n        list {\n          amount\n          formattedAmount\n        }\n        sale {\n          amount\n          formattedAmount\n        }\n      }\n    }\n  }\n  categories(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n    query: $query\n    filter: $filter\n    after: $categoriesAfter\n    first: $categoriesFirst\n    sort: $categoriesSort\n    fuzzy: $categoriesFuzzy\n    fuzzyLevel: $categoriesFuzzyLevel\n  ) {\n    totalCount\n    items {\n      id\n      name\n      slug\n      seoInfo {\n        semanticUrl\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetSearchResults</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetSearchResults($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $query: String, $filter: String, $productsAfter: String, $productsFirst: Int, $productsSort: String, $productsFuzzy: Boolean, $productsFuzzyLevel: Int, $categoriesAfter: String, $categoriesFirst: Int, $categoriesSort: String, $categoriesFuzzy: Boolean, $categoriesFuzzyLevel: Int) {
  products(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
    query: $query
    filter: $filter
    after: $productsAfter
    first: $productsFirst
    sort: $productsSort
    fuzzy: $productsFuzzy
    fuzzyLevel: $productsFuzzyLevel
  ) {
    totalCount
    items {
      id
      name
      code
      slug
      imgSrc
      price {
        actual {
          amount
          formattedAmount
        }
        list {
          amount
          formattedAmount
        }
        sale {
          amount
          formattedAmount
        }
      }
    }
  }
  categories(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
    query: $query
    filter: $filter
    after: $categoriesAfter
    first: $categoriesFirst
    sort: $categoriesSort
    fuzzy: $categoriesFuzzy
    fuzzyLevel: $categoriesFuzzyLevel
  ) {
    totalCount
    items {
      id
      name
      slug
      seoInfo {
        semanticUrl
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;storeId&quot;: &quot;${Init.StoreId}&quot;,
    &quot;userId&quot;: &quot;${Init.UserId}&quot;,
    &quot;cultureName&quot;: &quot;${Init.CultureName}&quot;,
    &quot;currencyCode&quot;: &quot;${Init.CurrencyCode}&quot;,
    &quot;query&quot;: &quot;${keyword}&quot;,
    &quot;filter&quot;: &quot;category.subtree:${Init.CatalogId}&quot;,
    &quot;productsFirst&quot;: 9,
    &quot;productsAfter&quot;: &quot;0&quot;,
    &quot;categoriesFirst&quot;: 20,
    &quot;categoriesAfter&quot;: &quot;0&quot;
}
</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="DelayTimer" enabled="true">
              <stringProp name="ConstantTimer.delay">${DelayTimer.min}</stringProp>
              <stringProp name="RandomTimer.range">${DelayTimer.max}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If 50x50" enabled="true">
            <stringProp name="IfController.condition">${__groovy(${__Random(0,1)} == 1)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchProducts" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SearchProducts&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;userId&quot;:&quot;${Init.UserId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;,&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,&quot;withFacets&quot;:false,&quot;query&quot;:&quot;${keyword}&quot;,&quot;filter&quot;:&quot;category.subtree:${Init.CatalogId}&quot;,&quot;first&quot;:20,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {\n  products(\n    storeId: $storeId\n    userId: $userId\n    after: $after\n    first: $first\n    filter: $filter\n    sort: $sort\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n    query: $query\n    fuzzy: $fuzzy\n    fuzzyLevel: $fuzzyLevel\n    productIds: $productIds\n  ) {\n    totalCount\n    items {\n      name\n      id\n      code\n      minQuantity\n      maxQuantity\n      hasVariations\n      slug\n      outline\n      imgSrc\n      images {\n        url\n      }\n      description(type: \&quot;QuickReview\&quot;) {\n        content\n        id\n      }\n      availabilityData {\n        isActive\n        isAvailable\n        isBuyable\n        isInStock\n        availableQuantity\n      }\n      price {\n        actual {\n          amount\n          formattedAmount\n        }\n        discountAmount {\n          amount\n          formattedAmount\n        }\n        sale {\n          amount\n          formattedAmount\n        }\n        list {\n          amount\n          formattedAmount\n        }\n      }\n      properties {\n        name\n        value\n        id\n      }\n    }\n    term_facets @include(if: $withFacets) {\n      name\n      label\n      terms {\n        label\n        term\n        count\n        isSelected\n      }\n    }\n    range_facets @include(if: $withFacets) {\n      name\n      label\n      ranges {\n        label\n        count\n        from\n        to\n        includeFrom\n        includeTo\n        isSelected\n      }\n    }\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SearchProducts</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {
  products(
    storeId: $storeId
    userId: $userId
    after: $after
    first: $first
    filter: $filter
    sort: $sort
    currencyCode: $currencyCode
    cultureName: $cultureName
    query: $query
    fuzzy: $fuzzy
    fuzzyLevel: $fuzzyLevel
    productIds: $productIds
  ) {
    totalCount
    items {
      name
      id
      code
      minQuantity
      maxQuantity
      hasVariations
      slug
      outline
      imgSrc
      images {
        url
      }
      description(type: &quot;QuickReview&quot;) {
        content
        id
      }
      availabilityData {
        isActive
        isAvailable
        isBuyable
        isInStock
        availableQuantity
      }
      price {
        actual {
          amount
          formattedAmount
        }
        discountAmount {
          amount
          formattedAmount
        }
        sale {
          amount
          formattedAmount
        }
        list {
          amount
          formattedAmount
        }
      }
      properties {
        name
        value
        id
      }
    }
    term_facets @include(if: $withFacets) {
      name
      label
      terms {
        label
        term
        count
        isSelected
      }
    }
    range_facets @include(if: $withFacets) {
      name
      label
      ranges {
        label
        count
        from
        to
        includeFrom
        includeTo
        isSelected
      }
    }
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;storeId&quot;: &quot;${Init.StoreId}&quot;,
    &quot;userId&quot;: &quot;${Init.UserId}&quot;,
    &quot;cultureName&quot;: &quot;${Init.CultureName}&quot;,
    &quot;currencyCode&quot;: &quot;${Init.CurrencyCode}&quot;,
    &quot;sort&quot;: &quot;priority-descending;name-ascending&quot;,
    &quot;withFacets&quot;: false,
    &quot;query&quot;: &quot;${keyword}&quot;,
    &quot;filter&quot;: &quot;category.subtree:${Init.CatalogId}&quot;,
    &quot;first&quot;: 20,
    &quot;after&quot;: &quot;0&quot;
}
</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">x-api-graphql-client</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="DelayTimer" enabled="true">
                <stringProp name="ConstantTimer.delay">${DelayTimer.min}</stringProp>
                <stringProp name="RandomTimer.range">${DelayTimer.max}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Group3 (Product Surfing)_(DRAFT)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${Group3.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUp}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Initializing" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Сontext" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storefrontapi/theme/context</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.StoreId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.StoreId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.storeId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.StoreName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.StoreName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.storeName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CultureName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CultureName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultCurrency.cultureName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CurrencyCode" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CurrencyCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultCurrency.code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CatalogId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CatalogId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.catalogId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.UserId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.UserId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.userId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMe" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMe&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query GetMe($after: String, $first: Int, $sort: String) {\n  me {\n    id\n    memberId\n    userName\n    email\n    emailConfirmed\n    photoUrl\n    phoneNumber\n    permissions\n    contact {\n      firstName\n      lastName\n      fullName\n      organizations(after: $after, first: $first, sort: $sort) {\n        items {\n          id\n          name\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMe</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMe($after: String, $first: Int, $sort: String) {
  me {
    id
    memberId
    userName
    email
    emailConfirmed
    photoUrl
    phoneNumber
    permissions
    contact {
      firstName
      lastName
      fullName
      organizations(after: $after, first: $first, sort: $sort) {
        items {
          id
          name
        }
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMenus" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMenus&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;},&quot;query&quot;:&quot;query GetMenus($storeId: String!, $cultureName: String, $keyword: String) {\n  menus(storeId: $storeId, cultureName: $cultureName, keyword: $keyword) {\n    name\n    items {\n      title\n      url\n      priority\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMenus</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMenus($storeId: String!, $cultureName: String, $keyword: String) {
  menus(storeId: $storeId, cultureName: $cultureName, keyword: $keyword) {
    name
    items {
      title
      url
      priority
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMyCart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;userId&quot;:&quot;${Init.UserId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line${totalThreads}\n  line${SearchRequests.min}\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    id\n    brandName\n    slug\n    masterVariation {\n      id\n      slug\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line${totalThreads}
  line${SearchRequests.min}
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    id
    brandName
    slug
    masterVariation {
      id
      slug
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,
	&quot;userId&quot;:&quot;${Init.UserId}&quot;,
	&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,
	&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="guestCartId" enabled="true">
              <stringProp name="TestPlan.comments">Used to merge carts at login</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">guestCartId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.cart.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Categories" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Categories&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;userId&quot;:&quot;${Init.UserId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;,&quot;first&quot;:100,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query Categories($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $after: String, $first: Int) {\n  categories(\n    storeId: $storeId\n    userId: $userId\n    after: $after\n    first: $first\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    items {\n      id\n      name\n      code\n      slug\n      outline\n      parent {\n        id\n      }\n      seoInfo {\n        semanticUrl\n      }\n      breadcrumbs {\n        title\n        seoPath\n      }\n    }\n    totalCount\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">Categories</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query Categories($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $after: String, $first: Int) {
  categories(
    storeId: $storeId
    userId: $userId
    after: $after
    first: $first
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    items {
      id
      name
      code
      slug
      outline
      parent {
        id
      }
      seoInfo {
        semanticUrl
      }
      breadcrumbs {
        title
        seoPath
      }
    }
    totalCount
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;storeId&quot;: &quot;${Init.StoreId}&quot;,
    &quot;userId&quot;: &quot;${Init.UserId}&quot;,
    &quot;cultureName&quot;: &quot;${Init.CultureName}&quot;,
    &quot;currencyCode&quot;: &quot;${Init.CurrencyCode}&quot;,
    &quot;first&quot;: 100,
    &quot;after&quot;: &quot;0&quot;
}

</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="categoryId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">categoryId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.categories.items[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://st-storefront.demo.govirto.com/${keyword_${SearchRequests.min}}s/carriage-${keyword_${SearchRequests.min}}s</stringProp>
              </elementProp>
              <elementProp name="apollographql-client-name" elementType="Header">
                <stringProp name="Header.name">apollographql-client-name</stringProp>
                <stringProp name="Header.value">x-api-graphql-client</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://st-storefront.demo.govirto.com</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="DelayTimer" enabled="false">
            <stringProp name="ConstantTimer.delay">${DelayTimer.min}</stringProp>
            <stringProp name="RandomTimer.range">${DelayTimer.max}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="category choice" enabled="false">
          <stringProp name="scriptLanguage"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename">C:/Users/danil.bayushev/Desktop/js1.js</stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">


</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchProducts" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SearchProducts&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;userId&quot;:&quot;${Init.UserId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;,&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,&quot;withFacets&quot;:false,&quot;query&quot;:&quot;${keyword}&quot;,&quot;filter&quot;:&quot;category.subtree:${Init.CatalogId}/${choiceCategory}&quot;,&quot;first&quot;:20,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {\n  products(\n    storeId: $storeId\n    userId: $userId\n    after: $after\n    first: $first\n    filter: $filter\n    sort: $sort\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n    query: $query\n    fuzzy: $fuzzy\n    fuzzyLevel: $fuzzyLevel\n    productIds: $productIds\n  ) {\n    totalCount\n    items {\n      name\n      id\n      code\n      minQuantity\n      maxQuantity\n      hasVariations\n      slug\n      outline\n      imgSrc\n      images {\n        url\n      }\n      description(type: \&quot;QuickReview\&quot;) {\n        content\n        id\n      }\n      availabilityData {\n        isActive\n        isAvailable\n        isBuyable\n        isInStock\n        availableQuantity\n      }\n      price {\n        actual {\n          amount\n          formattedAmount\n        }\n        discountAmount {\n          amount\n          formattedAmount\n        }\n        sale {\n          amount\n          formattedAmount\n        }\n        list {\n          amount\n          formattedAmount\n        }\n      }\n      properties {\n        name\n        value\n        id\n      }\n    }\n    term_facets @include(if: $withFacets) {\n      name\n      label\n      terms {\n        label\n        term\n        count\n        isSelected\n      }\n    }\n    range_facets @include(if: $withFacets) {\n      name\n      label\n      ranges {\n        label\n        count\n        from\n        to\n        includeFrom\n        includeTo\n        isSelected\n      }\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">SearchProducts</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {
  products(
    storeId: $storeId
    userId: $userId
    after: $after
    first: $first
    filter: $filter
    sort: $sort
    currencyCode: $currencyCode
    cultureName: $cultureName
    query: $query
    fuzzy: $fuzzy
    fuzzyLevel: $fuzzyLevel
    productIds: $productIds
  ) {
    totalCount
    items {
      name
      id
      code
      minQuantity
      maxQuantity
      hasVariations
      slug
      outline
      imgSrc
      images {
        url
      }
      description(type: &quot;QuickReview&quot;) {
        content
        id
      }
      availabilityData {
        isActive
        isAvailable
        isBuyable
        isInStock
        availableQuantity
      }
      price {
        actual {
          amount
          formattedAmount
        }
        discountAmount {
          amount
          formattedAmount
        }
        sale {
          amount
          formattedAmount
        }
        list {
          amount
          formattedAmount
        }
      }
      properties {
        name
        value
        id
      }
    }
    term_facets @include(if: $withFacets) {
      name
      label
      terms {
        label
        term
        count
        isSelected
      }
    }
    range_facets @include(if: $withFacets) {
      name
      label
      ranges {
        label
        count
        from
        to
        includeFrom
        includeTo
        isSelected
      }
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;storeId&quot;: &quot;${Init.StoreId}&quot;,
    &quot;userId&quot;: &quot;${Init.UserId}&quot;,
    &quot;cultureName&quot;: &quot;${Init.CultureName}&quot;,
    &quot;currencyCode&quot;: &quot;${Init.CurrencyCode}&quot;,
    &quot;sort&quot;: &quot;priority-descending;name-ascending&quot;,
    &quot;withFacets&quot;: false,
    &quot;query&quot;: &quot;${keyword}&quot;,
    &quot;filter&quot;: &quot;category.subtree:${Init.CatalogId}/${choiceCategory}&quot;,
    &quot;first&quot;: 20,
    &quot;after&quot;: &quot;0&quot;
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${serverName}</stringProp>
              </elementProp>
              <elementProp name="apollographql-client-name" elementType="Header">
                <stringProp name="Header.name">apollographql-client-name</stringProp>
                <stringProp name="Header.value">x-api-graphql-client</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://${serverName}</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="DelayTimer" enabled="true">
            <stringProp name="ConstantTimer.delay">${DelayTimer.min}</stringProp>
            <stringProp name="RandomTimer.range">${DelayTimer.max}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Group4 (Create Order)_(DRAFT)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${Group4.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUp}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Initializing" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Сontext" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storefrontapi/theme/context</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.StoreId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.StoreId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.storeId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.StoreName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.StoreName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.storeName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CultureName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CultureName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultCurrency.cultureName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CurrencyCode" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CurrencyCode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.defaultCurrency.code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.CatalogId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.CatalogId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.catalogId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.UserId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Init.UserId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.userId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMe" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMe&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query GetMe($after: String, $first: Int, $sort: String) {\n  me {\n    id\n    memberId\n    userName\n    email\n    emailConfirmed\n    photoUrl\n    phoneNumber\n    permissions\n    contact {\n      firstName\n      lastName\n      fullName\n      organizations(after: $after, first: $first, sort: $sort) {\n        items {\n          id\n          name\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMe</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMe($after: String, $first: Int, $sort: String) {
  me {
    id
    memberId
    userName
    email
    emailConfirmed
    photoUrl
    phoneNumber
    permissions
    contact {
      firstName
      lastName
      fullName
      organizations(after: $after, first: $first, sort: $sort) {
        items {
          id
          name
        }
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMenus" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMenus&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;},&quot;query&quot;:&quot;query GetMenus($storeId: String!, $cultureName: String, $keyword: String) {\n  menus(storeId: $storeId, cultureName: $cultureName, keyword: $keyword) {\n    name\n    items {\n      title\n      url\n      priority\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMenus</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMenus($storeId: String!, $cultureName: String, $keyword: String) {
  menus(storeId: $storeId, cultureName: $cultureName, keyword: $keyword) {
    name
    items {
      title
      url
      priority
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMyCart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;userId&quot;:&quot;${Init.UserId}&quot;,&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line${totalThreads}\n  line${SearchRequests.min}\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    id\n    brandName\n    slug\n    masterVariation {\n      id\n      slug\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverName}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line${totalThreads}
  line${SearchRequests.min}
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    id
    brandName
    slug
    masterVariation {
      id
      slug
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,
	&quot;userId&quot;:&quot;${Init.UserId}&quot;,
	&quot;cultureName&quot;:&quot;${Init.CultureName}&quot;,
	&quot;currencyCode&quot;:&quot;${Init.CurrencyCode}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="guestCartId" enabled="true">
              <stringProp name="TestPlan.comments">Used to merge carts at login</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">guestCartId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.cart.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If 50x50" enabled="true">
          <stringProp name="IfController.condition">${__groovy(${__Random(0,1)} == 1)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;userName&quot;:&quot;${username}&quot;,&quot;password&quot;:&quot;${password}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/storefrontapi/account/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">x-api-graphql-client</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1350226782">{&quot;succeeded&quot;:true,&quot;errors&quot;:[]}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMe" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMe&quot;,&quot;variables&quot;:{&quot;first&quot;:1,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query GetMe($after: String, $first: Int, $sort: String) {\n  me {\n    id\n    memberId\n    userName\n    email\n    emailConfirmed\n    photoUrl\n    phoneNumber\n    permissions\n    contact {\n      firstName\n      lastName\n      fullName\n      organizations(after: $after, first: $first, sort: $sort) {\n        items {\n          id\n          name\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetMe</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetMe($after: String, $first: Int, $sort: String) {
  me {
    id
    memberId
    userName
    email
    emailConfirmed
    photoUrl
    phoneNumber
    permissions
    contact {
      firstName
      lastName
      fullName
      organizations(after: $after, first: $first, sort: $sort) {
        items {
          id
          name
        }
      }
    }
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;first&quot;:1,&quot;after&quot;:&quot;0&quot;}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">x-api-graphql-client</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Init.UserId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Init.UserId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.me.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Scope.variable">userId</stringProp>
                <stringProp name="TestPlan.comments">Overwriting the guest ID with the existing user ID</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="MergeCart" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MergeCart&quot;,&quot;variables&quot;:{&quot;command&quot;:{&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,&quot;userId&quot;:&quot;${Init.UserId}&quot;,&quot;secondCartId&quot;:&quot;${guestCartId}&quot;,&quot;currencyCode&quot;:&quot;${Init.currency}&quot;,&quot;cultureName&quot;:&quot;${Init.language}&quot;}},&quot;query&quot;:&quot;mutation MergeCart($command: InputMergeCartType!) {\n  mergeCart(command: $command) {\n    id\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">MergeCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation MergeCart($command: InputMergeCartType!) {
  mergeCart(command: $command) {
    id
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;command&quot;:{
		&quot;storeId&quot;:&quot;${Init.StoreId}&quot;,
		&quot;userId&quot;:&quot;${Init.UserId}&quot;,
		&quot;secondCartId&quot;:&quot;${guestCartId}&quot;,
		&quot;currencyCode&quot;:&quot;${Init.currency}&quot;,
		&quot;cultureName&quot;:&quot;${Init.language}&quot;
	}
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">x-api-graphql-client</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetProductsWithoutVariations" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Categories" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Categories&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;first&quot;:100,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query Categories($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $after: String, $first: Int) {\n  categories(\n    storeId: $storeId\n    userId: $userId\n    after: $after\n    first: $first\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    items {\n      id\n      parent {\n        id\n      }\n      name\n      code\n      slug\n      path\n      outline\n      seoInfo {\n        semanticUrl\n      }\n    }\n    totalCount\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">Categories</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query Categories($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $after: String, $first: Int) {
  categories(
    storeId: $storeId
    userId: $userId
    after: $after
    first: $first
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    items {
      id
      parent {
        id
      }
      name
      code
      slug
      path
      outline
      seoInfo {
        semanticUrl
      }
    }
    totalCount
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${storeId}&quot;,
	&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
	&quot;cultureName&quot;:&quot;${cultureName}&quot;,
	&quot;userId&quot;:&quot;${userId}&quot;,
	&quot;first&quot;:100,
	&quot;after&quot;:&quot;0&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchProducts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SearchProducts&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,&quot;withFacets&quot;:true,&quot;query&quot;:&quot;&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;filter&quot;:&quot;category.subtree:fc596540864a41bf8ab78734ee7353a3/8ce26885a05b412e9e5230c9721529ed&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;first&quot;:16,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {\n  products(\n    storeId: $storeId\n    userId: $userId\n    after: $after\n    first: $first\n    filter: $filter\n    sort: $sort\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n    query: $query\n    fuzzy: $fuzzy\n    fuzzyLevel: $fuzzyLevel\n    productIds: $productIds\n  ) {\n    totalCount\n    items {\n      name\n      id\n      code\n      minQuantity\n      maxQuantity\n      hasVariations\n      slug\n      outline\n      imgSrc\n      images {\n        url\n      }\n      description(type: \&quot;QuickReview\&quot;) {\n        content\n        id\n      }\n      availabilityData {\n        isActive\n        isAvailable\n        isBuyable\n        isInStock\n        availableQuantity\n      }\n      price {\n        actual {\n          amount\n          formattedAmount\n        }\n        discountAmount {\n          amount\n          formattedAmount\n        }\n        sale {\n          amount\n          formattedAmount\n        }\n        list {\n          amount\n          formattedAmount\n        }\n      }\n      properties {\n        name\n        value\n        id\n      }\n    }\n    term_facets @include(if: $withFacets) {\n      name\n      label\n      terms {\n        label\n        term\n        count\n        isSelected\n      }\n    }\n    range_facets @include(if: $withFacets) {\n      name\n      label\n      ranges {\n        label\n        count\n        from\n        to\n        includeFrom\n        includeTo\n        isSelected\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SearchProducts</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {
  products(
    storeId: $storeId
    userId: $userId
    after: $after
    first: $first
    filter: $filter
    sort: $sort
    currencyCode: $currencyCode
    cultureName: $cultureName
    query: $query
    fuzzy: $fuzzy
    fuzzyLevel: $fuzzyLevel
    productIds: $productIds
  ) {
    totalCount
    items {
      name
      id
      code
      minQuantity
      maxQuantity
      hasVariations
      slug
      outline
      imgSrc
      images {
        url
      }
      description(type: &quot;QuickReview&quot;) {
        content
        id
      }
      availabilityData {
        isActive
        isAvailable
        isBuyable
        isInStock
        availableQuantity
      }
      price {
        actual {
          amount
          formattedAmount
        }
        discountAmount {
          amount
          formattedAmount
        }
        sale {
          amount
          formattedAmount
        }
        list {
          amount
          formattedAmount
        }
      }
      properties {
        name
        value
        id
      }
    }
    term_facets @include(if: $withFacets) {
      name
      label
      terms {
        label
        term
        count
        isSelected
      }
    }
    range_facets @include(if: $withFacets) {
      name
      label
      ranges {
        label
        count
        from
        to
        includeFrom
        includeTo
        isSelected
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${storeId}&quot;,
	&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,
	&quot;withFacets&quot;:true,
	&quot;query&quot;:&quot;&quot;,
	&quot;userId&quot;:&quot;${userId}&quot;,
	&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
	&quot;filter&quot;:&quot;category.subtree:fc596540864a41bf8ab78734ee7353a3/8ce26885a05b412e9e5230c9721529ed&quot;,
	&quot;cultureName&quot;:&quot;${cultureName}&quot;,
	&quot;first&quot;:16,
	&quot;after&quot;:&quot;0&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchProductsWithFilters" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SearchProducts&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,&quot;withFacets&quot;:true,&quot;query&quot;:&quot;&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;filter&quot;:&quot;category.subtree:fc596540864a41bf8ab78734ee7353a3/8ce26885a05b412e9e5230c9721529ed \&quot;BRAND\&quot;:\&quot;HP\&quot; \&quot;COLOR\&quot;:\&quot;Gray &amp; Black\&quot; \&quot;FUNCTION\&quot;:\&quot;Printer\&quot; \&quot;LCD Size\&quot;:\&quot;10.2\&quot; \&quot;OPERATING SYSTEM\&quot;:\&quot;ANDROID\&quot; \&quot;price\&quot;:[100 TO)&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;first&quot;:16,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {\n  products(\n    storeId: $storeId\n    userId: $userId\n    after: $after\n    first: $first\n    filter: $filter\n    sort: $sort\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n    query: $query\n    fuzzy: $fuzzy\n    fuzzyLevel: $fuzzyLevel\n    productIds: $productIds\n  ) {\n    totalCount\n    items {\n      name\n      id\n      code\n      minQuantity\n      maxQuantity\n      hasVariations\n      slug\n      outline\n      imgSrc\n      images {\n        url\n      }\n      description(type: \&quot;QuickReview\&quot;) {\n        content\n        id\n      }\n      availabilityData {\n        isActive\n        isAvailable\n        isBuyable\n        isInStock\n        availableQuantity\n      }\n      price {\n        actual {\n          amount\n          formattedAmount\n        }\n        discountAmount {\n          amount\n          formattedAmount\n        }\n        sale {\n          amount\n          formattedAmount\n        }\n        list {\n          amount\n          formattedAmount\n        }\n      }\n      properties {\n        name\n        value\n        id\n      }\n    }\n    term_facets @include(if: $withFacets) {\n      name\n      label\n      terms {\n        label\n        term\n        count\n        isSelected\n      }\n    }\n    range_facets @include(if: $withFacets) {\n      name\n      label\n      ranges {\n        label\n        count\n        from\n        to\n        includeFrom\n        includeTo\n        isSelected\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SearchProducts</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {
  products(
    storeId: $storeId
    userId: $userId
    after: $after
    first: $first
    filter: $filter
    sort: $sort
    currencyCode: $currencyCode
    cultureName: $cultureName
    query: $query
    fuzzy: $fuzzy
    fuzzyLevel: $fuzzyLevel
    productIds: $productIds
  ) {
    totalCount
    items {
      name
      id
      code
      minQuantity
      maxQuantity
      hasVariations
      slug
      outline
      imgSrc
      images {
        url
      }
      description(type: &quot;QuickReview&quot;) {
        content
        id
      }
      availabilityData {
        isActive
        isAvailable
        isBuyable
        isInStock
        availableQuantity
      }
      price {
        actual {
          amount
          formattedAmount
        }
        discountAmount {
          amount
          formattedAmount
        }
        sale {
          amount
          formattedAmount
        }
        list {
          amount
          formattedAmount
        }
      }
      properties {
        name
        value
        id
      }
    }
    term_facets @include(if: $withFacets) {
      name
      label
      terms {
        label
        term
        count
        isSelected
      }
    }
    range_facets @include(if: $withFacets) {
      name
      label
      ranges {
        label
        count
        from
        to
        includeFrom
        includeTo
        isSelected
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${storeId}&quot;,
	&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,
	&quot;withFacets&quot;:true,
	&quot;query&quot;:&quot;&quot;,
	&quot;userId&quot;:&quot;${userId}&quot;,
	&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
	&quot;filter&quot;:&quot;category.subtree:fc596540864a41bf8ab78734ee7353a3/8ce26885a05b412e9e5230c9721529ed \&quot;BRAND\&quot;:\&quot;HP\&quot; \&quot;COLOR\&quot;:\&quot;Gray &amp; Black\&quot; \&quot;FUNCTION\&quot;:\&quot;Printer\&quot; \&quot;LCD Size\&quot;:\&quot;10.2\&quot; \&quot;OPERATING SYSTEM\&quot;:\&quot;ANDROID\&quot; \&quot;price\&quot;:[100 TO)&quot;,
	&quot;cultureName&quot;:&quot;${cultureName}&quot;,
	&quot;first&quot;:16,
	&quot;after&quot;:&quot;0&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddToCart" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddItem" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AddItem&quot;,&quot;variables&quot;:{&quot;command&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;productId&quot;:&quot;47e4aaef9c9e4326924d4a4080f461a5&quot;,&quot;quantity&quot;:1}},&quot;query&quot;:&quot;mutation AddItem($command: InputAddItemType!) {\n  addItem(command: $command) {\n    name\n    itemsQuantity\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AddItem</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation AddItem($command: InputAddItemType!) {
  addItem(command: $command) {
    name
    itemsQuantity
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;command&quot;:
	{
		&quot;storeId&quot;:&quot;${storeId}&quot;,
		&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
		&quot;cultureName&quot;:&quot;${cultureName}&quot;,
		&quot;userId&quot;:&quot;${userId}&quot;,
		&quot;productId&quot;:&quot;47e4aaef9c9e4326924d4a4080f461a5&quot;,
		&quot;quantity&quot;:1
	}
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">x-api-graphql-client</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMyCart" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line1\n  line2\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    brandName\n    slug\n    masterVariation {\n      id\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line1
  line2
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    brandName
    slug
    masterVariation {
      id
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${storeId}&quot;,
	&quot;userId&quot;:&quot;${userId}&quot;,
	&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
	&quot;cultureName&quot;:&quot;${cultureName}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">x-api-graphql-client</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetProductsWithVariations" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchProducts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SearchProducts&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,&quot;withFacets&quot;:true,&quot;query&quot;:&quot;&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;filter&quot;:&quot;category.subtree:fc596540864a41bf8ab78734ee7353a3/3db665f7c95e46c3890c4a208d8af73d&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;first&quot;:16,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {\n  products(\n    storeId: $storeId\n    userId: $userId\n    after: $after\n    first: $first\n    filter: $filter\n    sort: $sort\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n    query: $query\n    fuzzy: $fuzzy\n    fuzzyLevel: $fuzzyLevel\n    productIds: $productIds\n  ) {\n    totalCount\n    items {\n      name\n      id\n      code\n      minQuantity\n      maxQuantity\n      hasVariations\n      slug\n      outline\n      imgSrc\n      images {\n        url\n      }\n      description(type: \&quot;QuickReview\&quot;) {\n        content\n        id\n      }\n      availabilityData {\n        isActive\n        isAvailable\n        isBuyable\n        isInStock\n        availableQuantity\n      }\n      price {\n        actual {\n          amount\n          formattedAmount\n        }\n        discountAmount {\n          amount\n          formattedAmount\n        }\n        sale {\n          amount\n          formattedAmount\n        }\n        list {\n          amount\n          formattedAmount\n        }\n      }\n      properties {\n        name\n        value\n        id\n      }\n    }\n    term_facets @include(if: $withFacets) {\n      name\n      label\n      terms {\n        label\n        term\n        count\n        isSelected\n      }\n    }\n    range_facets @include(if: $withFacets) {\n      name\n      label\n      ranges {\n        label\n        count\n        from\n        to\n        includeFrom\n        includeTo\n        isSelected\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SearchProducts</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {
  products(
    storeId: $storeId
    userId: $userId
    after: $after
    first: $first
    filter: $filter
    sort: $sort
    currencyCode: $currencyCode
    cultureName: $cultureName
    query: $query
    fuzzy: $fuzzy
    fuzzyLevel: $fuzzyLevel
    productIds: $productIds
  ) {
    totalCount
    items {
      name
      id
      code
      minQuantity
      maxQuantity
      hasVariations
      slug
      outline
      imgSrc
      images {
        url
      }
      description(type: &quot;QuickReview&quot;) {
        content
        id
      }
      availabilityData {
        isActive
        isAvailable
        isBuyable
        isInStock
        availableQuantity
      }
      price {
        actual {
          amount
          formattedAmount
        }
        discountAmount {
          amount
          formattedAmount
        }
        sale {
          amount
          formattedAmount
        }
        list {
          amount
          formattedAmount
        }
      }
      properties {
        name
        value
        id
      }
    }
    term_facets @include(if: $withFacets) {
      name
      label
      terms {
        label
        term
        count
        isSelected
      }
    }
    range_facets @include(if: $withFacets) {
      name
      label
      ranges {
        label
        count
        from
        to
        includeFrom
        includeTo
        isSelected
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;storeId&quot;: &quot;${storeId}&quot;,
    &quot;sort&quot;: &quot;priority-descending;name-ascending&quot;,
    &quot;withFacets&quot;: true,
    &quot;query&quot;: &quot;&quot;,
    &quot;userId&quot;: &quot;${userId}&quot;,
    &quot;currencyCode&quot;: &quot;${currencyCode}&quot;,
    &quot;filter&quot;: &quot;category.subtree:fc596540864a41bf8ab78734ee7353a3/3db665f7c95e46c3890c4a208d8af73d&quot;,
    &quot;cultureName&quot;: &quot;${cultureName}&quot;,
    &quot;first&quot;: 16,
    &quot;after&quot;: &quot;0&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetProduct" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetProduct&quot;,&quot;variables&quot;:{&quot;id&quot;:&quot;3f604bc4a3d147358a4e5e77ae064a2b&quot;,&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;userId&quot;:&quot;${userId}&quot;},&quot;query&quot;:&quot;query GetProduct($storeId: String!, $currencyCode: String!, $cultureName: String, $id: String!) {\n  product(\n    storeId: $storeId\n    id: $id\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    name\n    id\n    code\n    slug\n    outline\n    minQuantity\n    maxQuantity\n    imgSrc\n    images {\n      url\n    }\n    breadcrumbs {\n      itemId\n      typeName\n      title\n      seoPath\n    }\n    description {\n      content\n      id\n    }\n    descriptions {\n      content\n      id\n    }\n    properties {\n      name\n      value\n      type\n      hidden\n      valueType\n      label\n    }\n    variations {\n      id\n      name\n      images {\n        url\n      }\n      minQuantity\n      maxQuantity\n      code\n      properties {\n        name\n        value\n        type\n      }\n      availabilityData {\n        isActive\n        isAvailable\n        isBuyable\n        isInStock\n        availableQuantity\n      }\n      price {\n        actual {\n          amount\n          formattedAmount\n        }\n        discountAmount {\n          amount\n          formattedAmount\n        }\n        sale {\n          amount\n          formattedAmount\n        }\n        list {\n          amount\n          formattedAmount\n        }\n      }\n    }\n    availabilityData {\n      isActive\n      isAvailable\n      isBuyable\n      isInStock\n      availableQuantity\n    }\n    price {\n      actual {\n        amount\n        formattedAmount\n      }\n      discountAmount {\n        amount\n        formattedAmount\n      }\n      sale {\n        amount\n        formattedAmount\n      }\n      list {\n        amount\n        formattedAmount\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetProduct</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetProduct($storeId: String!, $currencyCode: String!, $cultureName: String, $id: String!) {
  product(
    storeId: $storeId
    id: $id
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    name
    id
    code
    slug
    outline
    minQuantity
    maxQuantity
    imgSrc
    images {
      url
    }
    breadcrumbs {
      itemId
      typeName
      title
      seoPath
    }
    description {
      content
      id
    }
    descriptions {
      content
      id
    }
    properties {
      name
      value
      type
      hidden
      valueType
      label
    }
    variations {
      id
      name
      images {
        url
      }
      minQuantity
      maxQuantity
      code
      properties {
        name
        value
        type
      }
      availabilityData {
        isActive
        isAvailable
        isBuyable
        isInStock
        availableQuantity
      }
      price {
        actual {
          amount
          formattedAmount
        }
        discountAmount {
          amount
          formattedAmount
        }
        sale {
          amount
          formattedAmount
        }
        list {
          amount
          formattedAmount
        }
      }
    }
    availabilityData {
      isActive
      isAvailable
      isBuyable
      isInStock
      availableQuantity
    }
    price {
      actual {
        amount
        formattedAmount
      }
      discountAmount {
        amount
        formattedAmount
      }
      sale {
        amount
        formattedAmount
      }
      list {
        amount
        formattedAmount
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;id&quot;: &quot;3f604bc4a3d147358a4e5e77ae064a2b&quot;,
    &quot;storeId&quot;: &quot;${storeId}&quot;,
    &quot;currencyCode&quot;: &quot;${currencyCode}&quot;,
    &quot;cultureName&quot;: &quot;${cultureName}&quot;,
    &quot;userId&quot;: &quot;${userId}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SearchRelatedProducts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SearchRelatedProducts&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;id&quot;:&quot;3f604bc4a3d147358a4e5e77ae064a2b&quot;,&quot;first&quot;:30,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query SearchRelatedProducts($storeId: String!, $currencyCode: String!, $cultureName: String, $id: String!, $after: String, $first: Int, $group: String, $query: String) {\n  product(\n    storeId: $storeId\n    id: $id\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    associations(after: $after, first: $first, group: $group, query: $query) {\n      items {\n        product {\n          name\n          id\n          slug\n          imgSrc\n          price {\n            actual {\n              amount\n              formattedAmount\n            }\n            list {\n              amount\n              formattedAmount\n            }\n            sale {\n              amount\n              formattedAmount\n            }\n          }\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SearchRelatedProducts</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SearchRelatedProducts($storeId: String!, $currencyCode: String!, $cultureName: String, $id: String!, $after: String, $first: Int, $group: String, $query: String) {
  product(
    storeId: $storeId
    id: $id
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    associations(after: $after, first: $first, group: $group, query: $query) {
      items {
        product {
          name
          id
          slug
          imgSrc
          price {
            actual {
              amount
              formattedAmount
            }
            list {
              amount
              formattedAmount
            }
            sale {
              amount
              formattedAmount
            }
          }
        }
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;storeId&quot;: &quot;${storeId}&quot;,
    &quot;currencyCode&quot;: &quot;${currencyCode}&quot;,
    &quot;cultureName&quot;: &quot;${cultureName}&quot;,
    &quot;userId&quot;: &quot;${userId}&quot;,
    &quot;id&quot;: &quot;3f604bc4a3d147358a4e5e77ae064a2b&quot;,
    &quot;first&quot;: 30,
    &quot;after&quot;: &quot;0&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AddToCart" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddItem" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AddItem&quot;,&quot;variables&quot;:{&quot;command&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;productId&quot;:&quot;b4d4522d8cde446e98651f4c45cf452c&quot;,&quot;quantity&quot;:1}},&quot;query&quot;:&quot;mutation AddItem($command: InputAddItemType!) {\n  addItem(command: $command) {\n    name\n    itemsQuantity\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AddItem</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation AddItem($command: InputAddItemType!) {
  addItem(command: $command) {
    name
    itemsQuantity
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;command&quot;:
	{
		&quot;storeId&quot;:&quot;${storeId}&quot;,
		&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
		&quot;cultureName&quot;:&quot;${cultureName}&quot;,
		&quot;userId&quot;:&quot;${userId}&quot;,
		&quot;productId&quot;:&quot;b4d4522d8cde446e98651f4c45cf452c&quot;,
		&quot;quantity&quot;:1
	}
}
</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">x-api-graphql-client</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMyCart" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line1\n  line2\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    brandName\n    slug\n    masterVariation {\n      id\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line1
  line2
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    brandName
    slug
    masterVariation {
      id
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${storeId}&quot;,
	&quot;userId&quot;:&quot;${userId}&quot;,
	&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
	&quot;cultureName&quot;:&quot;${cultureName}&quot;
}
</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">x-api-graphql-client</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${serverName}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Checkout" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMyAddresses" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMyAddresses&quot;,&quot;variables&quot;:{&quot;sort&quot;:&quot;lastName:asc&quot;},&quot;query&quot;:&quot;query GetMyAddresses($after: String, $first: Int, $sort: String) {\n  me {\n    contact {\n      addresses(after: $after, first: $first, sort: $sort) {\n        items {\n          ...memberAddressFields\n        }\n      }\n    }\n  }\n}\n\nfragment memberAddressFields on MemberAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line1\n  line2\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  isDefault\n  phone\n  email\n  addressType\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMyAddresses</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMyAddresses($after: String, $first: Int, $sort: String) {
  me {
    contact {
      addresses(after: $after, first: $first, sort: $sort) {
        items {
          ...memberAddressFields
        }
      }
    }
  }
}

fragment memberAddressFields on MemberAddressType {
  id
  name
  organization
  firstName
  lastName
  line1
  line2
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  isDefault
  phone
  email
  addressType
}

</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;sort&quot;: &quot;lastName:asc&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="addressId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">addressId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.me.contact.addresses.items[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Scope.variable">userId</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMyCart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line1\n  line2\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    brandName\n    slug\n    masterVariation {\n      id\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line1
  line2
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    brandName
    slug
    masterVariation {
      id
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${storeId}&quot;,
	&quot;userId&quot;:&quot;${userId}&quot;,
	&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
	&quot;cultureName&quot;:&quot;${cultureName}&quot;
}
</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddOrUpdateCartShipment(address)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AddOrUpdateCartShipment&quot;,&quot;variables&quot;:{&quot;command&quot;:{&quot;shipment&quot;:{&quot;deliveryAddress&quot;:{&quot;id&quot;:&quot;${addressId}&quot;,&quot;name&quot;:&quot;USA, Michigan, DETROIT, 6334 LYNCH RD&quot;,&quot;organization&quot;:null,&quot;firstName&quot;:&quot;JmeterAccount&quot;,&quot;lastName&quot;:&quot;Test&quot;,&quot;line1&quot;:&quot;6334 LYNCH RD&quot;,&quot;line2&quot;:null,&quot;city&quot;:&quot;DETROIT&quot;,&quot;countryCode&quot;:&quot;USA&quot;,&quot;countryName&quot;:&quot;United States of America&quot;,&quot;regionId&quot;:&quot;MI&quot;,&quot;regionName&quot;:&quot;Michigan&quot;,&quot;postalCode&quot;:&quot;48234-4119&quot;,&quot;phone&quot;:&quot;111-222-333&quot;,&quot;email&quot;:&quot;${username}@yopmail.com&quot;,&quot;addressType&quot;:2}},&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;userId&quot;:&quot;${userId}&quot;}},&quot;query&quot;:&quot;mutation AddOrUpdateCartShipment($command: InputAddOrUpdateCartShipmentType!) {\n  addOrUpdateCartShipment(command: $command) {\n    id\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AddOrUpdateCartShipment</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation AddOrUpdateCartShipment($command: InputAddOrUpdateCartShipmentType!) {
  addOrUpdateCartShipment(command: $command) {
    id
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;command&quot;:
	{
		&quot;shipment&quot;:
		{
			&quot;deliveryAddress&quot;:
			{
				&quot;id&quot;:&quot;${addressId}&quot;,
				&quot;name&quot;:&quot;USA, Michigan, DETROIT, 6334 LYNCH RD&quot;,
				&quot;organization&quot;:null,
				&quot;firstName&quot;:&quot;JmeterAccount&quot;,
				&quot;lastName&quot;:&quot;Test&quot;,
				&quot;line1&quot;:&quot;6334 LYNCH RD&quot;,
				&quot;line2&quot;:null,
				&quot;city&quot;:&quot;DETROIT&quot;,
				&quot;countryCode&quot;:&quot;USA&quot;,
				&quot;countryName&quot;:&quot;United States of America&quot;,
				&quot;regionId&quot;:&quot;MI&quot;,
				&quot;regionName&quot;:&quot;Michigan&quot;,
				&quot;postalCode&quot;:&quot;48234-4119&quot;,
				&quot;phone&quot;:&quot;111-222-333&quot;,
				&quot;email&quot;:&quot;${username}@yopmail.com&quot;,
				&quot;addressType&quot;:2
			}
		},
		&quot;storeId&quot;:&quot;${storeId}&quot;,
		&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
		&quot;cultureName&quot;:&quot;${cultureName}&quot;,
		&quot;userId&quot;:&quot;${userId}&quot;
	}
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMyCart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line1\n  line2\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    brandName\n    slug\n    masterVariation {\n      id\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line1
  line2
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    brandName
    slug
    masterVariation {
      id
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${storeId}&quot;,
	&quot;userId&quot;:&quot;${userId}&quot;,
	&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
	&quot;cultureName&quot;:&quot;${cultureName}&quot;
}
</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="shipId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">shipId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.cart.shipments[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddOrUpdateCartShipment(method)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AddOrUpdateCartShipment&quot;,&quot;variables&quot;:{&quot;command&quot;:{&quot;shipment&quot;:{&quot;shipmentMethodCode&quot;:&quot;FixedRate&quot;,&quot;shipmentMethodOption&quot;:&quot;Ground&quot;,&quot;id&quot;:&quot;${shipId}&quot;},&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;userId&quot;:&quot;${userId}&quot;}},&quot;query&quot;:&quot;mutation AddOrUpdateCartShipment($command: InputAddOrUpdateCartShipmentType!) {\n  addOrUpdateCartShipment(command: $command) {\n    id\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AddOrUpdateCartShipment</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation AddOrUpdateCartShipment($command: InputAddOrUpdateCartShipmentType!) {
  addOrUpdateCartShipment(command: $command) {
    id
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;command&quot;:
	{
		&quot;shipment&quot;:
		{
			&quot;shipmentMethodCode&quot;:&quot;FixedRate&quot;,
			&quot;shipmentMethodOption&quot;:&quot;Ground&quot;,
			&quot;id&quot;: &quot;${shipId}&quot;
		},
		&quot;storeId&quot;:&quot;${storeId}&quot;,
		&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
		&quot;cultureName&quot;:&quot;${cultureName}&quot;,
		&quot;userId&quot;:&quot;${userId}&quot;
	}
}
</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMyCart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line1\n  line2\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    brandName\n    slug\n    masterVariation {\n      id\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line1
  line2
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    brandName
    slug
    masterVariation {
      id
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${storeId}&quot;,
	&quot;userId&quot;:&quot;${userId}&quot;,
	&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
	&quot;cultureName&quot;:&quot;${cultureName}&quot;
}
</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="AddOrUpdateCartPayment" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AddOrUpdateCartPayment&quot;,&quot;variables&quot;:{&quot;command&quot;:{&quot;payment&quot;:{&quot;paymentGatewayCode&quot;:&quot;DefaultManualPaymentMethod&quot;},&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;userId&quot;:&quot;${userId}&quot;}},&quot;query&quot;:&quot;mutation AddOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\n  addOrUpdateCartPayment(command: $command) {\n    id\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AddOrUpdateCartPayment</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation AddOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {
  addOrUpdateCartPayment(command: $command) {
    id
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;command&quot;:{&quot;payment&quot;:{&quot;paymentGatewayCode&quot;:&quot;DefaultManualPaymentMethod&quot;},&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;,&quot;userId&quot;:&quot;${userId}&quot;}}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getMyCart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;${storeId}&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,&quot;cultureName&quot;:&quot;${cultureName}&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line1\n  line2\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    brandName\n    slug\n    masterVariation {\n      id\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line1
  line2
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    brandName
    slug
    masterVariation {
      id
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;storeId&quot;:&quot;${storeId}&quot;,
	&quot;userId&quot;:&quot;${userId}&quot;,
	&quot;currencyCode&quot;:&quot;${currencyCode}&quot;,
	&quot;cultureName&quot;:&quot;${cultureName}&quot;
}
</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="cartId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">cartId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.cart.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="CreateOrderFromCart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;CreateOrderFromCart&quot;,&quot;variables&quot;:{&quot;command&quot;:{&quot;cartId&quot;:&quot;${cartId}&quot;}},&quot;query&quot;:&quot;mutation CreateOrderFromCart($command: InputCreateOrderFromCartType!) {\n  createOrderFromCart(command: $command) {\n    id\n    number\n    comment\n    discounts {\n      amount {\n        amount\n        formattedAmount\n        currency {\n          code\n        }\n      }\n      coupon\n      description\n      promotionId\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    currency {\n      ...currencyFields\n    }\n    items {\n      ...orderLineItemFields\n    }\n    shipments {\n      shipmentMethodCode\n      shipmentMethodOption\n      shippingMethod {\n        logoUrl\n        typeName\n      }\n      price {\n        ...moneyFields\n      }\n      deliveryAddress {\n        ...orderAddressFields\n      }\n    }\n    inPayments {\n      gatewayCode\n      paymentMethod {\n        logoUrl\n        typeName\n      }\n      billingAddress {\n        ...orderAddressFields\n      }\n    }\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}\n\nfragment orderLineItemFields on OrderLineItemType {\n  id\n  imageUrl\n  isGift\n  name\n  productId\n  product {\n    brandName\n    slug\n    masterVariation {\n      id\n    }\n  }\n  quantity\n  sku\n  extendedPrice {\n    ...moneyFields\n  }\n  placedPrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment orderAddressFields on OrderAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line1\n  line2\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CreateOrderFromCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation CreateOrderFromCart($command: InputCreateOrderFromCartType!) {
  createOrderFromCart(command: $command) {
    id
    number
    comment
    discounts {
      amount {
        amount
        formattedAmount
        currency {
          code
        }
      }
      coupon
      description
      promotionId
    }
    taxTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    currency {
      ...currencyFields
    }
    items {
      ...orderLineItemFields
    }
    shipments {
      shipmentMethodCode
      shipmentMethodOption
      shippingMethod {
        logoUrl
        typeName
      }
      price {
        ...moneyFields
      }
      deliveryAddress {
        ...orderAddressFields
      }
    }
    inPayments {
      gatewayCode
      paymentMethod {
        logoUrl
        typeName
      }
      billingAddress {
        ...orderAddressFields
      }
    }
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}

fragment orderLineItemFields on OrderLineItemType {
  id
  imageUrl
  isGift
  name
  productId
  product {
    brandName
    slug
    masterVariation {
      id
    }
  }
  quantity
  sku
  extendedPrice {
    ...moneyFields
  }
  placedPrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment orderAddressFields on OrderAddressType {
  id
  name
  organization
  firstName
  lastName
  line1
  line2
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;command&quot;: {
        &quot;cartId&quot;: &quot;${cartId}&quot;
    }
}
</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="orderId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">orderId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.createOrderFromCart.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="RemoveCart" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;RemoveCart&quot;,&quot;variables&quot;:{&quot;command&quot;:{&quot;cartId&quot;:&quot;${cartId}&quot;}},&quot;query&quot;:&quot;mutation RemoveCart($command: InputRemoveCartType!) {\n  removeCart(command: $command)\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">RemoveCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation RemoveCart($command: InputRemoveCartType!) {
  removeCart(command: $command)
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;command&quot;: {
        &quot;cartId&quot;: &quot;${cartId}&quot;
    }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${serverName}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="cartId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">cartId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.cart.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetMyOrder" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMyOrder&quot;,&quot;variables&quot;:{&quot;cultureName&quot;:&quot;en-US&quot;,&quot;id&quot;:&quot;${orderId}&quot;},&quot;query&quot;:&quot;query GetMyOrder($id: String, $number: String, $cultureName: String) {\n  order(id: $id, number: $number, cultureName: $cultureName) {\n    id\n    number\n    comment\n    createdDate\n    status\n    discounts {\n      amount {\n        amount\n        formattedAmount\n        currency {\n          code\n        }\n      }\n      coupon\n      description\n      promotionId\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    currency {\n      ...currencyFields\n    }\n    items {\n      ...orderLineItemFields\n    }\n    shipments {\n      shipmentMethodCode\n      shipmentMethodOption\n      shippingMethod {\n        logoUrl\n        typeName\n      }\n      price {\n        ...moneyFields\n      }\n      deliveryAddress {\n        ...orderAddressFields\n      }\n    }\n    inPayments {\n      gatewayCode\n      number\n      paymentMethod {\n        logoUrl\n        typeName\n      }\n      billingAddress {\n        ...orderAddressFields\n      }\n    }\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}\n\nfragment orderLineItemFields on OrderLineItemType {\n  id\n  imageUrl\n  isGift\n  name\n  productId\n  product {\n    brandName\n    slug\n    masterVariation {\n      id\n    }\n  }\n  quantity\n  sku\n  extendedPrice {\n    ...moneyFields\n  }\n  placedPrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment orderAddressFields on OrderAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line1\n  line2\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName">GetMyOrder</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">query GetMyOrder($id: String, $number: String, $cultureName: String) {
  order(id: $id, number: $number, cultureName: $cultureName) {
    id
    number
    comment
    createdDate
    status
    discounts {
      amount {
        amount
        formattedAmount
        currency {
          code
        }
      }
      coupon
      description
      promotionId
    }
    taxTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    currency {
      ...currencyFields
    }
    items {
      ...orderLineItemFields
    }
    shipments {
      shipmentMethodCode
      shipmentMethodOption
      shippingMethod {
        logoUrl
        typeName
      }
      price {
        ...moneyFields
      }
      deliveryAddress {
        ...orderAddressFields
      }
    }
    inPayments {
      gatewayCode
      number
      paymentMethod {
        logoUrl
        typeName
      }
      billingAddress {
        ...orderAddressFields
      }
    }
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}

fragment orderLineItemFields on OrderLineItemType {
  id
  imageUrl
  isGift
  name
  productId
  product {
    brandName
    slug
    masterVariation {
      id
    }
  }
  quantity
  sku
  extendedPrice {
    ...moneyFields
  }
  placedPrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment orderAddressFields on OrderAddressType {
  id
  name
  organization
  firstName
  lastName
  line1
  line2
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
    &quot;cultureName&quot;: &quot;en-US&quot;,
    &quot;id&quot;: &quot;${orderId}&quot;
}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${serverName}</stringProp>
              </elementProp>
              <elementProp name="apollographql-client-name" elementType="Header">
                <stringProp name="Header.name">apollographql-client-name</stringProp>
                <stringProp name="Header.value">x-api-graphql-client</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://${serverName}</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="cartId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">cartId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.cart.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group (Record)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/css${SearchRequests.min}-${Keyword.maxCount}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="family" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">family</stringProp>
                  <stringProp name="Argument.value">Lato:ital,wght@0,400;0,700;0,900;1,400</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="family" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">family</stringProp>
                  <stringProp name="Argument.value">Roboto+Condensed:wght@700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="display" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">display</stringProp>
                  <stringProp name="Argument.value">swap</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">fonts.googleapis.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/css${SearchRequests.min}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">style</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/submit/activity-stream/sessions/1/44016cd8-79a4-4c6a-9b8c-ea9c3f${SearchRequests.min}1848b-4" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&#x1f;�&#x8;&#x0;&#x0;&#x0;&#x0;&#x0;&#x0;&#xd;
���n#!&#xc;�߅롂���&#xc;b��X%��I6���k�6���������&#x7;�?&#x11;&#x12;����&#xe;&#x1f;lݏ\N�&quot;��)8&#x17;���cA�q�x1�&apos;p�3�E�eyh����&#xe;L��&#x17;`��&#xb;7��8?�W�]��&#xc;�1�:J!�&#x3;&#x1a;�&#xf;�b֫&#x3;~�${Keyword.maxCount}&#x7;�&#xe;��&#x2;��J��;&quot;��JX&#x17;�v@�����:c�&#x14;��7�&amp;)��Q椽&#x7;WK?3���&#xd;^��ZѶb&#x14;���ܵT�gH*&amp;�h��&lt;${Keyword.maxCount},C��&#xd;
-�&#x7f;�[�m��xg���&#xe;:��a�s;�e��Nt�N���գ^i��)�k�o�ݓ.��&#x3;${Keyword.maxCount}��&#x18;�V�uA[U&#x12;&#x1e;���b%l�rQt&#x0;&#x1b;�*D�`	��z��&#x14;&#x1e;6�${SearchRequests.min}4���_�C&#x1d;m&#x1e;&#x7;���+̸��rSp�ߣ���_���&#xd;+!f,�&#x15;&#x1a;�����hf�%�U6	��S(� h���j1�&#x1b;&#x1;h8�&#x4;��&#x3;�&#xe;m�|Px~�E�_�D�u��z�${SearchRequests.min}�DR��b�����ꢕ�&#x5;�zS�z�Wӟ&#x1b;�&#x1a;}����SK�c&#xd;
&#x1b;:� 	&#x1e;��@r%&#x17;�-&#xd;3&#xe;�r&#x1e;�&#x1e;H1w�ʻ�&#xc;�&#x17;b�so�[!̸�Bn���&#x7f;&#x1;�A &#x1b;�&#x3;&#x0;&#x0;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">incoming.telemetry.mozilla.org</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/submit/activity-stream/sessions/1/44016cd8-79a4-4c6a-9b8c-ea9c3f${SearchRequests.min}1848b</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Date" elementType="Header">
                  <stringProp name="Header.name">Date</stringProp>
                  <stringProp name="Header.value">Fri, ${SearchRequests.min}4 Jun ${SearchRequests.min}0${SearchRequests.min}${SearchRequests.min} 14:4${Keyword.maxCount}:16 GMT</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Content-Encoding" elementType="Header">
                  <stringProp name="Header.name">Content-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/index.js-3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/index.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/app-runner.css-${SearchRequests.min}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/app-runner.css</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">style</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/app-runner.e8bd0608.js-6" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/app-runner.e8bd0608.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/index.js</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/storefrontapi/theme/context-7" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storefrontapi/theme/context</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/xapi/graphql-8" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMe&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query GetMe($after: String, $first: Int, $sort: String) {\n  me {\n    id\n    memberId\n    userName\n    email\n    emailConfirmed\n    photoUrl\n    phoneNumber\n    permissions\n    contact {\n      firstName\n      lastName\n      fullName\n      organizations(after: $after, first: $first, sort: $sort) {\n        items {\n          id\n          name\n        }\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMe</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMe($after: String, $first: Int, $sort: String) {
  me {
    id
    memberId
    userName
    email
    emailConfirmed
    photoUrl
    phoneNumber
    permissions
    contact {
      firstName
      lastName
      fullName
      organizations(after: $after, first: $first, sort: $sort) {
        items {
          id
          name
        }
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/en.bcbef${Keyword.maxCount}03.js-9" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/en.bcbef${Keyword.maxCount}03.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/app-runner.e8bd0608.js</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/index.css-${Group1.loadPerc}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/index.css</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/css,*/*;q=0.1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">style</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/index.60da${Group4.loadPerc}ef.js-1${SearchRequests.min}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/index.60da${Group4.loadPerc}ef.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/sign-in-form.718bd689.js-11" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/sign-in-form.718bd689.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/index.60da${Group4.loadPerc}ef.js-14" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/index.60da${Group4.loadPerc}ef.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/app-runner.e8bd0608.js</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/vee-validate.esm.6${SearchRequests.min}d7${Group1.loadPerc}77.js-13" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/vee-validate.esm.6${SearchRequests.min}d7${Group1.loadPerc}77.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/vee-validate.esm.6${SearchRequests.min}d7${Group1.loadPerc}77.js-${Group4.loadPerc}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/vee-validate.esm.6${SearchRequests.min}d7${Group1.loadPerc}77.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/index.60da${Group4.loadPerc}ef.js</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/xapi/graphql-16" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GetMenus&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;B${SearchRequests.min}B-store&quot;,&quot;cultureName&quot;:&quot;en-US&quot;},&quot;query&quot;:&quot;query GetMenus($storeId: String!, $cultureName: String, $keyword: String) {\n  menus(storeId: $storeId, cultureName: $cultureName, keyword: $keyword) {\n    name\n    items {\n      title\n      url\n      priority\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetMenus</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetMenus($storeId: String!, $cultureName: String, $keyword: String) {
  menus(storeId: $storeId, cultureName: $cultureName, keyword: $keyword) {
    name
    items {
      title
      url
      priority
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;storeId&quot;:&quot;B${SearchRequests.min}B-store&quot;,&quot;cultureName&quot;:&quot;en-US&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/common/logo.svg-18" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/common/logo.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/home/hexa-1.webp-19" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/home/hexa-1.webp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/home/hexa-${SearchRequests.min}.webp-${SearchRequests.min}0" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/home/hexa-${SearchRequests.min}.webp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/home/hexa-3.webp-${SearchRequests.min}1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/home/hexa-3.webp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/xapi/graphql-17" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getMyCart&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;B${SearchRequests.min}B-store&quot;,&quot;userId&quot;:&quot;043ab3e9-c30b-4341-89f${Keyword.maxCount}-a9cd6b64a97b&quot;,&quot;cultureName&quot;:&quot;en-US&quot;,&quot;currencyCode&quot;:&quot;USD&quot;},&quot;query&quot;:&quot;query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {\n  cart(\n    storeId: $storeId\n    userId: $userId\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    id\n    name\n    comment\n    purchaseOrderNumber\n    coupons {\n      code\n    }\n    itemsCount\n    itemsQuantity\n    shipments {\n      id\n      shipmentMethodCode\n      shipmentMethodOption\n      deliveryAddress {\n        ...cartAddressFields\n      }\n      price {\n        ...moneyFields\n      }\n    }\n    discounts {\n      promotionId\n      description\n      amount\n      coupon\n    }\n    payments {\n      id\n      paymentGatewayCode\n      billingAddress {\n        ...cartAddressFields\n      }\n    }\n    addresses {\n      ...cartAddressFields\n    }\n    items {\n      ...lineItemFields\n    }\n    currency {\n      ...currencyFields\n    }\n    total {\n      ...moneyFields\n    }\n    discountTotal {\n      ...moneyFields\n    }\n    subTotal {\n      ...moneyFields\n    }\n    shippingTotal {\n      ...moneyFields\n    }\n    shippingPrice {\n      ...moneyFields\n    }\n    taxTotal {\n      ...moneyFields\n    }\n    extendedPriceTotal {\n      ...moneyFields\n    }\n    extendedPriceTotalWithTax {\n      ...moneyFields\n    }\n    validationErrors(ruleSet: \&quot;items\&quot;) {\n      errorCode\n      errorMessage\n      errorParameters {\n        key\n        value\n      }\n      objectId\n    }\n    availablePaymentMethods {\n      code\n      logoUrl\n      price {\n        ...moneyFields\n      }\n    }\n    availableShippingMethods {\n      id\n      code\n      logoUrl\n      optionName\n      optionDescription\n      price {\n        ...moneyFields\n      }\n    }\n    gifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n    availableGifts {\n      id\n      imageUrl\n      name\n      lineItemId\n    }\n  }\n}\n\nfragment cartAddressFields on CartAddressType {\n  id\n  name\n  organization\n  firstName\n  lastName\n  line1\n  line${SearchRequests.min}\n  city\n  countryCode\n  countryName\n  regionId\n  regionName\n  postalCode\n  zip\n  phone\n  email\n  addressType\n}\n\nfragment lineItemFields on LineItemType {\n  id\n  imageUrl\n  inStockQuantity\n  isGift\n  isReadOnly\n  isReccuring\n  isValid\n  name\n  productId\n  product {\n    id\n    brandName\n    slug\n    masterVariation {\n      id\n      slug\n    }\n    minQuantity\n    maxQuantity\n    variations {\n      id\n      minQuantity\n      maxQuantity\n    }\n  }\n  quantity\n  sku\n  thumbnailImageUrl\n  validationErrors {\n    errorCode\n    errorMessage\n    errorParameters {\n      key\n      value\n    }\n  }\n  extendedPrice {\n    ...moneyFields\n  }\n  listPrice {\n    ...moneyFields\n  }\n  salePrice {\n    ...moneyFields\n  }\n  taxTotal {\n    ...moneyFields\n  }\n}\n\nfragment moneyFields on MoneyType {\n  amount\n  decimalDigits\n  formattedAmount\n  formattedAmountWithoutCurrency\n  formattedAmountWithoutPoint\n  formattedAmountWithoutPointAndCurrency\n  currency {\n    ...currencyFields\n  }\n}\n\nfragment currencyFields on CurrencyType {\n  code\n  customFormatting\n  exchangeRate\n  symbol\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getMyCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getMyCart($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String) {
  cart(
    storeId: $storeId
    userId: $userId
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    id
    name
    comment
    purchaseOrderNumber
    coupons {
      code
    }
    itemsCount
    itemsQuantity
    shipments {
      id
      shipmentMethodCode
      shipmentMethodOption
      deliveryAddress {
        ...cartAddressFields
      }
      price {
        ...moneyFields
      }
    }
    discounts {
      promotionId
      description
      amount
      coupon
    }
    payments {
      id
      paymentGatewayCode
      billingAddress {
        ...cartAddressFields
      }
    }
    addresses {
      ...cartAddressFields
    }
    items {
      ...lineItemFields
    }
    currency {
      ...currencyFields
    }
    total {
      ...moneyFields
    }
    discountTotal {
      ...moneyFields
    }
    subTotal {
      ...moneyFields
    }
    shippingTotal {
      ...moneyFields
    }
    shippingPrice {
      ...moneyFields
    }
    taxTotal {
      ...moneyFields
    }
    extendedPriceTotal {
      ...moneyFields
    }
    extendedPriceTotalWithTax {
      ...moneyFields
    }
    validationErrors(ruleSet: &quot;items&quot;) {
      errorCode
      errorMessage
      errorParameters {
        key
        value
      }
      objectId
    }
    availablePaymentMethods {
      code
      logoUrl
      price {
        ...moneyFields
      }
    }
    availableShippingMethods {
      id
      code
      logoUrl
      optionName
      optionDescription
      price {
        ...moneyFields
      }
    }
    gifts {
      id
      imageUrl
      name
      lineItemId
    }
    availableGifts {
      id
      imageUrl
      name
      lineItemId
    }
  }
}

fragment cartAddressFields on CartAddressType {
  id
  name
  organization
  firstName
  lastName
  line1
  line${SearchRequests.min}
  city
  countryCode
  countryName
  regionId
  regionName
  postalCode
  zip
  phone
  email
  addressType
}

fragment lineItemFields on LineItemType {
  id
  imageUrl
  inStockQuantity
  isGift
  isReadOnly
  isReccuring
  isValid
  name
  productId
  product {
    id
    brandName
    slug
    masterVariation {
      id
      slug
    }
    minQuantity
    maxQuantity
    variations {
      id
      minQuantity
      maxQuantity
    }
  }
  quantity
  sku
  thumbnailImageUrl
  validationErrors {
    errorCode
    errorMessage
    errorParameters {
      key
      value
    }
  }
  extendedPrice {
    ...moneyFields
  }
  listPrice {
    ...moneyFields
  }
  salePrice {
    ...moneyFields
  }
  taxTotal {
    ...moneyFields
  }
}

fragment moneyFields on MoneyType {
  amount
  decimalDigits
  formattedAmount
  formattedAmountWithoutCurrency
  formattedAmountWithoutPoint
  formattedAmountWithoutPointAndCurrency
  currency {
    ...currencyFields
  }
}

fragment currencyFields on CurrencyType {
  code
  customFormatting
  exchangeRate
  symbol
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;storeId&quot;:&quot;B${SearchRequests.min}B-store&quot;,&quot;userId&quot;:&quot;043ab3e9-c30b-4341-89f${Keyword.maxCount}-a9cd6b64a97b&quot;,&quot;cultureName&quot;:&quot;en-US&quot;,&quot;currencyCode&quot;:&quot;USD&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/menu.1979ecbc.js-${SearchRequests.min}3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/menu.1979ecbc.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/app-runner.e8bd0608.js</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/us.svg-${SearchRequests.min}4" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/us.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/app-runner.css</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/static/images/home/hexa-left.png-${SearchRequests.min}6" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/static/images/home/hexa-left.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/index.css</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/static/images/home/bevel-bottom.png-${SearchRequests.min}7" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/static/images/home/bevel-bottom.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/index.css</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/home/main-banner.webp-${SearchRequests.min}${Keyword.maxCount}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/home/main-banner.webp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/fa-solid-900.woff${SearchRequests.min}-${SearchRequests.min}${SearchRequests.min}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/fa-solid-900.woff${SearchRequests.min}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/app-runner.css</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">identity</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/font-woff${SearchRequests.min};q=1.0,application/font-woff;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">font</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/static/images/home/bevel-top.png-${SearchRequests.min}8" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/static/images/home/bevel-top.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/index.css</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/static/images/home/hexa-right.png-${SearchRequests.min}9" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/static/images/home/hexa-right.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/index.css</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/dashboard/icons/compare-desktop.svg-30" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/dashboard/icons/compare-desktop.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/dashboard/icons/lists.svg-31" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/dashboard/icons/lists.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/dashboard/icons/orders-desktop.svg-3${SearchRequests.min}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/dashboard/icons/orders-desktop.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/checkout/cart-desktop.svg-33" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/checkout/cart-desktop.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/dashboard/icons/bulk-order-desktop.svg-34" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/dashboard/icons/bulk-order-desktop.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/home/hexa-4.webp-3${Keyword.maxCount}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/home/hexa-4.webp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/common/logo-${keyword_4}.svg-36" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/common/logo-${keyword_4}.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/icons/favicon-16x16.png-37" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/icons/favicon-16x16.png</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/canonical.html-38" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/canonical.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-39" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ipv4" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ipv4</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/success.txt</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/success.txt-40" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ipv6" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ipv6</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">detectportal.firefox.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/success.txt</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/matcher.7dc63acd.js-41" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/matcher.7dc63acd.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/category.f9e9${Keyword.maxCount}96a.js-43" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/category.f9e9${Keyword.maxCount}96a.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/add-to-compare.b338ad${Keyword.maxCount}3.js-49" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/add-to-compare.b338ad${Keyword.maxCount}3.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/breadcrumbs.f674ca${SearchRequests.min}8.js-4${SearchRequests.min}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/breadcrumbs.f674ca${SearchRequests.min}8.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/useProductsRoutes.${SearchRequests.min}30a9${SearchRequests.min}be.js-44" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/useProductsRoutes.${SearchRequests.min}30a9${SearchRequests.min}be.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/search-utils.ff60e098.js-4${Keyword.maxCount}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/search-utils.ff60e098.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/view-mode.868d0667.js-46" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/view-mode.868d0667.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/add-to-cart.79f70d18.js-48" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/add-to-cart.79f70d18.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/product.b${SearchRequests.min}${SearchRequests.min}ebe7${Keyword.maxCount}.js-${Keyword.maxCount}1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/product.b${SearchRequests.min}${SearchRequests.min}ebe7${Keyword.maxCount}.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/product-skeleton-grid.b6e33${Keyword.maxCount}4${Keyword.maxCount}.js-47" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/product-skeleton-grid.b6e33${Keyword.maxCount}4${Keyword.maxCount}.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/back-button-in-header.bf0e6aa${SearchRequests.min}.js-${Keyword.maxCount}0" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/back-button-in-header.bf0e6aa${SearchRequests.min}.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/product-card-grid.4bb${SearchRequests.min}8c3b.js-${Keyword.maxCount}3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/product-card-grid.4bb${SearchRequests.min}8c3b.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/useElementVisibility.${SearchRequests.min}997d3bd.js-${Keyword.maxCount}${SearchRequests.min}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/useElementVisibility.${SearchRequests.min}997d3bd.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/product.b${SearchRequests.min}${SearchRequests.min}ebe7${Keyword.maxCount}.js-${Keyword.maxCount}4" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/product.b${SearchRequests.min}${SearchRequests.min}ebe7${Keyword.maxCount}.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/matcher.7dc63acd.js</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/product-card-grid.4bb${SearchRequests.min}8c3b.js-${Keyword.maxCount}${Keyword.maxCount}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/product-card-grid.4bb${SearchRequests.min}8c3b.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/matcher.7dc63acd.js</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/product-skeleton-grid.b6e33${Keyword.maxCount}4${Keyword.maxCount}.js-${Keyword.maxCount}6" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/product-skeleton-grid.b6e33${Keyword.maxCount}4${Keyword.maxCount}.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/matcher.7dc63acd.js</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/useElementVisibility.${SearchRequests.min}997d3bd.js-${Keyword.maxCount}7" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/useElementVisibility.${SearchRequests.min}997d3bd.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/matcher.7dc63acd.js</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/back-button-in-header.bf0e6aa${SearchRequests.min}.js-${Keyword.maxCount}8" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/back-button-in-header.bf0e6aa${SearchRequests.min}.js</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/themes/assets/matcher.7dc63acd.js</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">script</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/storefrontapi/content/pages-${Keyword.maxCount}9" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;permalink&quot;:&quot;/carriage-${keyword_2}s&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storefrontapi/content/pages</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/${keyword_${SearchRequests.min}}s/carriage-${keyword_${SearchRequests.min}}s</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/storefrontapi/seoInfos/carriage-${keyword_2}s-60" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/storefrontapi/seoInfos/carriage-${keyword_2}s</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/${keyword_${SearchRequests.min}}s/carriage-${keyword_${SearchRequests.min}}s</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/xapi/graphql-6${SearchRequests.min}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SearchProducts&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;B${SearchRequests.min}B-store&quot;,&quot;userId&quot;:&quot;043ab3e9-c30b-4341-89f${Keyword.maxCount}-a9cd6b64a97b&quot;,&quot;cultureName&quot;:&quot;en-US&quot;,&quot;currencyCode&quot;:&quot;USD&quot;,&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,&quot;withFacets&quot;:true,&quot;query&quot;:&quot;&quot;,&quot;filter&quot;:&quot;category.subtree:fc${Keyword.maxCount}96${Keyword.maxCount}40864a41bf8ab78734ee73${Keyword.maxCount}3a3/4fbaca886f014767a${Keyword.maxCount}${SearchRequests.min}f3f38b9df648f&quot;,&quot;first&quot;:16,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {\n  products(\n    storeId: $storeId\n    userId: $userId\n    after: $after\n    first: $first\n    filter: $filter\n    sort: $sort\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n    query: $query\n    fuzzy: $fuzzy\n    fuzzyLevel: $fuzzyLevel\n    productIds: $productIds\n  ) {\n    totalCount\n    items {\n      name\n      id\n      code\n      minQuantity\n      maxQuantity\n      hasVariations\n      slug\n      outline\n      imgSrc\n      images {\n        url\n      }\n      description(type: \&quot;QuickReview\&quot;) {\n        content\n        id\n      }\n      availabilityData {\n        isActive\n        isAvailable\n        isBuyable\n        isInStock\n        availableQuantity\n      }\n      price {\n        actual {\n          amount\n          formattedAmount\n        }\n        discountAmount {\n          amount\n          formattedAmount\n        }\n        sale {\n          amount\n          formattedAmount\n        }\n        list {\n          amount\n          formattedAmount\n        }\n      }\n      properties {\n        name\n        value\n        id\n      }\n    }\n    term_facets @include(if: $withFacets) {\n      name\n      label\n      terms {\n        label\n        term\n        count\n        isSelected\n      }\n    }\n    range_facets @include(if: $withFacets) {\n      name\n      label\n      ranges {\n        label\n        count\n        from\n        to\n        includeFrom\n        includeTo\n        isSelected\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SearchProducts</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {
  products(
    storeId: $storeId
    userId: $userId
    after: $after
    first: $first
    filter: $filter
    sort: $sort
    currencyCode: $currencyCode
    cultureName: $cultureName
    query: $query
    fuzzy: $fuzzy
    fuzzyLevel: $fuzzyLevel
    productIds: $productIds
  ) {
    totalCount
    items {
      name
      id
      code
      minQuantity
      maxQuantity
      hasVariations
      slug
      outline
      imgSrc
      images {
        url
      }
      description(type: &quot;QuickReview&quot;) {
        content
        id
      }
      availabilityData {
        isActive
        isAvailable
        isBuyable
        isInStock
        availableQuantity
      }
      price {
        actual {
          amount
          formattedAmount
        }
        discountAmount {
          amount
          formattedAmount
        }
        sale {
          amount
          formattedAmount
        }
        list {
          amount
          formattedAmount
        }
      }
      properties {
        name
        value
        id
      }
    }
    term_facets @include(if: $withFacets) {
      name
      label
      terms {
        label
        term
        count
        isSelected
      }
    }
    range_facets @include(if: $withFacets) {
      name
      label
      ranges {
        label
        count
        from
        to
        includeFrom
        includeTo
        isSelected
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;storeId&quot;:&quot;B${SearchRequests.min}B-store&quot;,&quot;userId&quot;:&quot;043ab3e9-c30b-4341-89f${Keyword.maxCount}-a9cd6b64a97b&quot;,&quot;cultureName&quot;:&quot;en-US&quot;,&quot;currencyCode&quot;:&quot;USD&quot;,&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,&quot;withFacets&quot;:true,&quot;query&quot;:&quot;&quot;,&quot;filter&quot;:&quot;category.subtree:fc${Keyword.maxCount}96${Keyword.maxCount}40864a41bf8ab78734ee73${Keyword.maxCount}3a3/4fbaca886f014767a${Keyword.maxCount}${SearchRequests.min}f3f38b9df648f&quot;,&quot;first&quot;:16,&quot;after&quot;:&quot;0&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/${keyword_${SearchRequests.min}}s/carriage-${keyword_${SearchRequests.min}}s</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/themes/assets/static/images/badge-check.svg-63" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/themes/assets/static/images/badge-check.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/${keyword_${SearchRequests.min}}s/carriage-${keyword_${SearchRequests.min}}s</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cms-content/assets/catalog/78${SearchRequests.min}9d/RUN-0837${Keyword.maxCount}139/1%${SearchRequests.min}0(1)_md.jfif-64" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-platform.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cms-content/assets/catalog/78${SearchRequests.min}9d/RUN-0837${Keyword.maxCount}139/1%${SearchRequests.min}0(1)_md.jfif</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/static/images/common/no-image.svg-6${Keyword.maxCount}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/static/images/common/no-image.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/${keyword_${SearchRequests.min}}s/carriage-${keyword_${SearchRequests.min}}s</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/xapi/graphql-66" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Categories&quot;,&quot;query&quot;:&quot;query Categories($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $after: String, $first: Int) {\n  categories(\n    storeId: $storeId\n    userId: $userId\n    after: $after\n    first: $first\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n  ) {\n    items {\n      id\n      name\n      code\n      slug\n      outline\n      parent {\n        id\n      }\n      seoInfo {\n        semanticUrl\n      }\n      breadcrumbs {\n        title\n        seoPath\n      }\n    }\n    totalCount\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">Categories</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query Categories($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $after: String, $first: Int) {
  categories(
    storeId: $storeId
    userId: $userId
    after: $after
    first: $first
    currencyCode: $currencyCode
    cultureName: $cultureName
  ) {
    items {
      id
      name
      code
      slug
      outline
      parent {
        id
      }
      seoInfo {
        semanticUrl
      }
      breadcrumbs {
        title
        seoPath
      }
    }
    totalCount
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;storeId&quot;:&quot;B${SearchRequests.min}B-store&quot;,&quot;userId&quot;:&quot;043ab3e9-c30b-4341-89f${Keyword.maxCount}-a9cd6b64a97b&quot;,&quot;cultureName&quot;:&quot;en-US&quot;,&quot;currencyCode&quot;:&quot;USD&quot;,&quot;first&quot;:${Group1.loadPerc}0,&quot;after&quot;:&quot;0&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/category/18b6de${Keyword.maxCount}8c36${Keyword.maxCount}49${Keyword.maxCount}181d0337${Keyword.maxCount}a${SearchRequests.min}0ff8d${Keyword.maxCount}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/xapi/graphql-67" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SearchProducts&quot;,&quot;variables&quot;:{&quot;storeId&quot;:&quot;B${SearchRequests.min}B-store&quot;,&quot;userId&quot;:&quot;043ab3e9-c30b-4341-89f${Keyword.maxCount}-a9cd6b64a97b&quot;,&quot;cultureName&quot;:&quot;en-US&quot;,&quot;currencyCode&quot;:&quot;USD&quot;,&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,&quot;withFacets&quot;:true,&quot;query&quot;:&quot;&quot;,&quot;filter&quot;:&quot;category.subtree:fc${Keyword.maxCount}96${Keyword.maxCount}40864a41bf8ab78734ee73${Keyword.maxCount}3a3/18b6de${Keyword.maxCount}8c36${Keyword.maxCount}49${Keyword.maxCount}181d0337${Keyword.maxCount}a${SearchRequests.min}0ff8d${Keyword.maxCount}&quot;,&quot;first&quot;:16,&quot;after&quot;:&quot;0&quot;},&quot;query&quot;:&quot;query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {\n  products(\n    storeId: $storeId\n    userId: $userId\n    after: $after\n    first: $first\n    filter: $filter\n    sort: $sort\n    currencyCode: $currencyCode\n    cultureName: $cultureName\n    query: $query\n    fuzzy: $fuzzy\n    fuzzyLevel: $fuzzyLevel\n    productIds: $productIds\n  ) {\n    totalCount\n    items {\n      name\n      id\n      code\n      minQuantity\n      maxQuantity\n      hasVariations\n      slug\n      outline\n      imgSrc\n      images {\n        url\n      }\n      description(type: \&quot;QuickReview\&quot;) {\n        content\n        id\n      }\n      availabilityData {\n        isActive\n        isAvailable\n        isBuyable\n        isInStock\n        availableQuantity\n      }\n      price {\n        actual {\n          amount\n          formattedAmount\n        }\n        discountAmount {\n          amount\n          formattedAmount\n        }\n        sale {\n          amount\n          formattedAmount\n        }\n        list {\n          amount\n          formattedAmount\n        }\n      }\n      properties {\n        name\n        value\n        id\n      }\n    }\n    term_facets @include(if: $withFacets) {\n      name\n      label\n      terms {\n        label\n        term\n        count\n        isSelected\n      }\n    }\n    range_facets @include(if: $withFacets) {\n      name\n      label\n      ranges {\n        label\n        count\n        from\n        to\n        includeFrom\n        includeTo\n        isSelected\n      }\n    }\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-storefront.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/xapi/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SearchProducts</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SearchProducts($storeId: String!, $userId: String!, $currencyCode: String!, $cultureName: String, $filter: String, $after: String, $first: Int, $sort: String, $query: String, $fuzzy: Boolean, $fuzzyLevel: Int, $withFacets: Boolean!, $productIds: [String]) {
  products(
    storeId: $storeId
    userId: $userId
    after: $after
    first: $first
    filter: $filter
    sort: $sort
    currencyCode: $currencyCode
    cultureName: $cultureName
    query: $query
    fuzzy: $fuzzy
    fuzzyLevel: $fuzzyLevel
    productIds: $productIds
  ) {
    totalCount
    items {
      name
      id
      code
      minQuantity
      maxQuantity
      hasVariations
      slug
      outline
      imgSrc
      images {
        url
      }
      description(type: &quot;QuickReview&quot;) {
        content
        id
      }
      availabilityData {
        isActive
        isAvailable
        isBuyable
        isInStock
        availableQuantity
      }
      price {
        actual {
          amount
          formattedAmount
        }
        discountAmount {
          amount
          formattedAmount
        }
        sale {
          amount
          formattedAmount
        }
        list {
          amount
          formattedAmount
        }
      }
      properties {
        name
        value
        id
      }
    }
    term_facets @include(if: $withFacets) {
      name
      label
      terms {
        label
        term
        count
        isSelected
      }
    }
    range_facets @include(if: $withFacets) {
      name
      label
      ranges {
        label
        count
        from
        to
        includeFrom
        includeTo
        isSelected
      }
    }
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;storeId&quot;:&quot;B${SearchRequests.min}B-store&quot;,&quot;userId&quot;:&quot;043ab3e9-c30b-4341-89f${Keyword.maxCount}-a9cd6b64a97b&quot;,&quot;cultureName&quot;:&quot;en-US&quot;,&quot;currencyCode&quot;:&quot;USD&quot;,&quot;sort&quot;:&quot;priority-descending;name-ascending&quot;,&quot;withFacets&quot;:true,&quot;query&quot;:&quot;&quot;,&quot;filter&quot;:&quot;category.subtree:fc${Keyword.maxCount}96${Keyword.maxCount}40864a41bf8ab78734ee73${Keyword.maxCount}3a3/18b6de${Keyword.maxCount}8c36${Keyword.maxCount}49${Keyword.maxCount}181d0337${Keyword.maxCount}a${SearchRequests.min}0ff8d${Keyword.maxCount}&quot;,&quot;first&quot;:16,&quot;after&quot;:&quot;0&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/category/18b6de${Keyword.maxCount}8c36${Keyword.maxCount}49${Keyword.maxCount}181d0337${Keyword.maxCount}a${SearchRequests.min}0ff8d${Keyword.maxCount}</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">x-api-graphql-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cms-content/assets/catalog/78${SearchRequests.min}9d/${SearchRequests.min}0J01${SearchRequests.min}/${SearchRequests.min}0J01${SearchRequests.min}_md.jpg-68" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-platform.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cms-content/assets/catalog/78${SearchRequests.min}9d/${SearchRequests.min}0J01${SearchRequests.min}/${SearchRequests.min}0J01${SearchRequests.min}_md.jpg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cms-content/assets/catalog/78${SearchRequests.min}9d/${SearchRequests.min}0H9${SearchRequests.min}7/${SearchRequests.min}0H9${SearchRequests.min}7_md.jpg-70" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-platform.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cms-content/assets/catalog/78${SearchRequests.min}9d/${SearchRequests.min}0H9${SearchRequests.min}7/${SearchRequests.min}0H9${SearchRequests.min}7_md.jpg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cms-content/assets/catalog/78${SearchRequests.min}9d/19T3${Keyword.maxCount}6/19T3${Keyword.maxCount}6_md.jpg-69" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-platform.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cms-content/assets/catalog/78${SearchRequests.min}9d/19T3${Keyword.maxCount}6/19T3${Keyword.maxCount}6_md.jpg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cms-content/assets/catalog/78${SearchRequests.min}9d/19N${Group1.loadPerc}${SearchRequests.min}/19N${Group1.loadPerc}${SearchRequests.min}_md.jpg-7${SearchRequests.min}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-platform.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cms-content/assets/catalog/78${SearchRequests.min}9d/19N${Group1.loadPerc}${SearchRequests.min}/19N${Group1.loadPerc}${SearchRequests.min}_md.jpg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cms-content/assets/catalog/78${SearchRequests.min}9d/19N083/19N${Group1.loadPerc}${SearchRequests.min}_md.jpg-71" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-platform.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cms-content/assets/catalog/78${SearchRequests.min}9d/19N083/19N${Group1.loadPerc}${SearchRequests.min}_md.jpg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cms-content/assets/catalog/78${SearchRequests.min}9d/19N0${Keyword.maxCount}0/19N0${Keyword.maxCount}0_md.jpg-73" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-platform.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cms-content/assets/catalog/78${SearchRequests.min}9d/19N0${Keyword.maxCount}0/19N0${Keyword.maxCount}0_md.jpg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cms-content/assets/catalog/78${SearchRequests.min}9d/19N069/19N069_md.jpg-74" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-platform.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cms-content/assets/catalog/78${SearchRequests.min}9d/19N069/19N069_md.jpg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cms-content/assets/catalog/78${SearchRequests.min}9d/19N07${SearchRequests.min}/19N07${SearchRequests.min}_md.jpg-7${Keyword.maxCount}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">st-platform.demo.govirto.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cms-content/assets/catalog/78${SearchRequests.min}9d/19N07${SearchRequests.min}/19N07${SearchRequests.min}_md.jpg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">no-cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://st-storefront.demo.govirto.com/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.8,en-US;q=0.${Keyword.maxCount},en;q=0.3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/${Keyword.maxCount}.0 (Windows NT ${Group1.loadPerc}.0; Win64; x64; rv:${Group1.loadPerc}1.0) Gecko/${SearchRequests.min}0${Group1.loadPerc}0${Group1.loadPerc}1 Firefox/${Group1.loadPerc}1.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/avif,image/webp,*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">image</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="true">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">2</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.default_encoding"></stringProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
